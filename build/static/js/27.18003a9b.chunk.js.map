{"version":3,"file":"static/js/27.18003a9b.chunk.js","mappings":"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","sources":["../node_modules/@solflare-wallet/sdk/lib/esm/adapters/base.js","../node_modules/@solflare-wallet/sdk/node_modules/@solana/web3.js/src/util/to-buffer.ts","../node_modules/@solflare-wallet/sdk/node_modules/@solana/web3.js/node_modules/minimalistic-assert/index.js","../node_modules/@solflare-wallet/sdk/node_modules/@solana/web3.js/node_modules/inherits/inherits_browser.js","../node_modules/@solflare-wallet/sdk/node_modules/@solana/web3.js/node_modules/hash.js/lib/hash/utils.js","../node_modules/@solflare-wallet/sdk/node_modules/@solana/web3.js/node_modules/hash.js/lib/hash/common.js","../node_modules/@solflare-wallet/sdk/node_modules/@solana/web3.js/node_modules/hash.js/lib/hash/sha/common.js","../node_modules/@solflare-wallet/sdk/node_modules/@solana/web3.js/node_modules/hash.js/lib/hash/sha/1.js","../node_modules/@solflare-wallet/sdk/node_modules/@solana/web3.js/node_modules/hash.js/lib/hash/sha/256.js","../node_modules/@solflare-wallet/sdk/node_modules/@solana/web3.js/node_modules/hash.js/lib/hash/sha/224.js","../node_modules/@solflare-wallet/sdk/node_modules/@solana/web3.js/node_modules/hash.js/lib/hash/sha/512.js","../node_modules/@solflare-wallet/sdk/node_modules/@solana/web3.js/node_modules/hash.js/lib/hash/sha/384.js","../node_modules/@solflare-wallet/sdk/node_modules/@solana/web3.js/node_modules/hash.js/lib/hash/sha.js","../node_modules/@solflare-wallet/sdk/node_modules/@solana/web3.js/node_modules/hash.js/lib/hash/ripemd.js","../node_modules/@solflare-wallet/sdk/node_modules/@solana/web3.js/node_modules/hash.js/lib/hash/hmac.js","../node_modules/@solflare-wallet/sdk/node_modules/@solana/web3.js/node_modules/hash.js/lib/hash.js","../node_modules/@solflare-wallet/sdk/node_modules/@solana/web3.js/node_modules/@ethersproject/logger/lib.esm/index.js","../node_modules/@solflare-wallet/sdk/node_modules/@solana/web3.js/node_modules/@ethersproject/logger/lib.esm/_version.js","../node_modules/@solflare-wallet/sdk/node_modules/@solana/web3.js/node_modules/@ethersproject/bytes/lib.esm/_version.js","../node_modules/@solflare-wallet/sdk/node_modules/@solana/web3.js/node_modules/@ethersproject/bytes/lib.esm/index.js","../node_modules/@solflare-wallet/sdk/node_modules/@solana/web3.js/node_modules/@ethersproject/sha2/lib.esm/sha2.js","../node_modules/@solflare-wallet/sdk/node_modules/@solana/web3.js/node_modules/@ethersproject/sha2/lib.esm/_version.js","../node_modules/@solflare-wallet/sdk/node_modules/@solana/web3.js/src/util/borsh-schema.ts","../node_modules/@solflare-wallet/sdk/node_modules/@solana/web3.js/src/publickey.ts","../node_modules/@solflare-wallet/sdk/node_modules/@solana/web3.js/src/bpf-loader-deprecated.ts","../node_modules/@solflare-wallet/sdk/node_modules/@solana/web3.js/src/layout.ts","../node_modules/@solflare-wallet/sdk/node_modules/@solana/web3.js/src/util/shortvec-encoding.ts","../node_modules/@solflare-wallet/sdk/node_modules/@solana/web3.js/src/message.ts","../node_modules/@solflare-wallet/sdk/node_modules/@solana/web3.js/src/util/assert.ts","../node_modules/@solflare-wallet/sdk/node_modules/@solana/web3.js/src/transaction.ts","../node_modules/@solflare-wallet/sdk/node_modules/@solana/web3.js/src/sysvar.ts","../node_modules/@solflare-wallet/sdk/node_modules/@solana/web3.js/src/util/send-and-confirm-transaction.ts","../node_modules/@solflare-wallet/sdk/node_modules/@solana/web3.js/src/util/sleep.ts","../node_modules/@solflare-wallet/sdk/node_modules/@solana/web3.js/src/instruction.ts","../node_modules/@solflare-wallet/sdk/node_modules/@solana/web3.js/src/fee-calculator.ts","../node_modules/@solflare-wallet/sdk/node_modules/@solana/web3.js/src/nonce-account.ts","../node_modules/@solflare-wallet/sdk/node_modules/@solana/web3.js/src/system-program.ts","../node_modules/@solflare-wallet/sdk/node_modules/@solana/web3.js/src/loader.ts","../node_modules/@solflare-wallet/sdk/node_modules/@solana/web3.js/src/bpf-loader.ts","../node_modules/@solflare-wallet/sdk/node_modules/@solana/web3.js/node_modules/cross-fetch/dist/browser-ponyfill.js","../node_modules/@solflare-wallet/sdk/node_modules/@solana/web3.js/src/errors.ts","../node_modules/@solflare-wallet/sdk/node_modules/@solana/web3.js/src/connection.ts","../node_modules/@solflare-wallet/sdk/node_modules/@solana/web3.js/src/keypair.ts","../node_modules/@solflare-wallet/sdk/node_modules/@solana/web3.js/src/ed25519-program.ts","../node_modules/@solflare-wallet/sdk/node_modules/@solana/web3.js/src/stake-program.ts","../node_modules/@solflare-wallet/sdk/node_modules/@solana/web3.js/src/secp256k1-program.ts","../node_modules/@solflare-wallet/sdk/node_modules/@solana/web3.js/src/validator-info.ts","../node_modules/@solflare-wallet/sdk/node_modules/@solana/web3.js/src/vote-account.ts","../node_modules/@solflare-wallet/sdk/node_modules/@solana/web3.js/src/vote-program.ts","../node_modules/@solflare-wallet/sdk/node_modules/@project-serum/sol-wallet-adapter/src/index.js","../node_modules/@solflare-wallet/sdk/lib/esm/adapters/web.js","../node_modules/@solflare-wallet/sdk/lib/esm/adapters/iframe.js","../node_modules/@solflare-wallet/sdk/lib/esm/index.js","../node_modules/@solflare-wallet/sdk/node_modules/buffer/index.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport EventEmitter from 'eventemitter3';\nvar WalletAdapter = /** @class */ (function (_super) {\n    __extends(WalletAdapter, _super);\n    function WalletAdapter() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return WalletAdapter;\n}(EventEmitter));\nexport default WalletAdapter;\n","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","module.exports = assert;\n\nfunction assert(val, msg) {\n  if (!val)\n    throw new Error(msg || 'Assertion failed');\n}\n\nassert.equal = function assertEqual(l, r, msg) {\n  if (l != r)\n    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));\n};\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n","'use strict';\n\nvar assert = require('minimalistic-assert');\nvar inherits = require('inherits');\n\nexports.inherits = inherits;\n\nfunction isSurrogatePair(msg, i) {\n  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {\n    return false;\n  }\n  if (i < 0 || i + 1 >= msg.length) {\n    return false;\n  }\n  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;\n}\n\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg))\n    return msg.slice();\n  if (!msg)\n    return [];\n  var res = [];\n  if (typeof msg === 'string') {\n    if (!enc) {\n      // Inspired by stringToUtf8ByteArray() in closure-library by Google\n      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143\n      // Apache License 2.0\n      // https://github.com/google/closure-library/blob/master/LICENSE\n      var p = 0;\n      for (var i = 0; i < msg.length; i++) {\n        var c = msg.charCodeAt(i);\n        if (c < 128) {\n          res[p++] = c;\n        } else if (c < 2048) {\n          res[p++] = (c >> 6) | 192;\n          res[p++] = (c & 63) | 128;\n        } else if (isSurrogatePair(msg, i)) {\n          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);\n          res[p++] = (c >> 18) | 240;\n          res[p++] = ((c >> 12) & 63) | 128;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        } else {\n          res[p++] = (c >> 12) | 224;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        }\n      }\n    } else if (enc === 'hex') {\n      msg = msg.replace(/[^a-z0-9]+/ig, '');\n      if (msg.length % 2 !== 0)\n        msg = '0' + msg;\n      for (i = 0; i < msg.length; i += 2)\n        res.push(parseInt(msg[i] + msg[i + 1], 16));\n    }\n  } else {\n    for (i = 0; i < msg.length; i++)\n      res[i] = msg[i] | 0;\n  }\n  return res;\n}\nexports.toArray = toArray;\n\nfunction toHex(msg) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++)\n    res += zero2(msg[i].toString(16));\n  return res;\n}\nexports.toHex = toHex;\n\nfunction htonl(w) {\n  var res = (w >>> 24) |\n            ((w >>> 8) & 0xff00) |\n            ((w << 8) & 0xff0000) |\n            ((w & 0xff) << 24);\n  return res >>> 0;\n}\nexports.htonl = htonl;\n\nfunction toHex32(msg, endian) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++) {\n    var w = msg[i];\n    if (endian === 'little')\n      w = htonl(w);\n    res += zero8(w.toString(16));\n  }\n  return res;\n}\nexports.toHex32 = toHex32;\n\nfunction zero2(word) {\n  if (word.length === 1)\n    return '0' + word;\n  else\n    return word;\n}\nexports.zero2 = zero2;\n\nfunction zero8(word) {\n  if (word.length === 7)\n    return '0' + word;\n  else if (word.length === 6)\n    return '00' + word;\n  else if (word.length === 5)\n    return '000' + word;\n  else if (word.length === 4)\n    return '0000' + word;\n  else if (word.length === 3)\n    return '00000' + word;\n  else if (word.length === 2)\n    return '000000' + word;\n  else if (word.length === 1)\n    return '0000000' + word;\n  else\n    return word;\n}\nexports.zero8 = zero8;\n\nfunction join32(msg, start, end, endian) {\n  var len = end - start;\n  assert(len % 4 === 0);\n  var res = new Array(len / 4);\n  for (var i = 0, k = start; i < res.length; i++, k += 4) {\n    var w;\n    if (endian === 'big')\n      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];\n    else\n      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];\n    res[i] = w >>> 0;\n  }\n  return res;\n}\nexports.join32 = join32;\n\nfunction split32(msg, endian) {\n  var res = new Array(msg.length * 4);\n  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n    var m = msg[i];\n    if (endian === 'big') {\n      res[k] = m >>> 24;\n      res[k + 1] = (m >>> 16) & 0xff;\n      res[k + 2] = (m >>> 8) & 0xff;\n      res[k + 3] = m & 0xff;\n    } else {\n      res[k + 3] = m >>> 24;\n      res[k + 2] = (m >>> 16) & 0xff;\n      res[k + 1] = (m >>> 8) & 0xff;\n      res[k] = m & 0xff;\n    }\n  }\n  return res;\n}\nexports.split32 = split32;\n\nfunction rotr32(w, b) {\n  return (w >>> b) | (w << (32 - b));\n}\nexports.rotr32 = rotr32;\n\nfunction rotl32(w, b) {\n  return (w << b) | (w >>> (32 - b));\n}\nexports.rotl32 = rotl32;\n\nfunction sum32(a, b) {\n  return (a + b) >>> 0;\n}\nexports.sum32 = sum32;\n\nfunction sum32_3(a, b, c) {\n  return (a + b + c) >>> 0;\n}\nexports.sum32_3 = sum32_3;\n\nfunction sum32_4(a, b, c, d) {\n  return (a + b + c + d) >>> 0;\n}\nexports.sum32_4 = sum32_4;\n\nfunction sum32_5(a, b, c, d, e) {\n  return (a + b + c + d + e) >>> 0;\n}\nexports.sum32_5 = sum32_5;\n\nfunction sum64(buf, pos, ah, al) {\n  var bh = buf[pos];\n  var bl = buf[pos + 1];\n\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  buf[pos] = hi >>> 0;\n  buf[pos + 1] = lo;\n}\nexports.sum64 = sum64;\n\nfunction sum64_hi(ah, al, bh, bl) {\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  return hi >>> 0;\n}\nexports.sum64_hi = sum64_hi;\n\nfunction sum64_lo(ah, al, bh, bl) {\n  var lo = al + bl;\n  return lo >>> 0;\n}\nexports.sum64_lo = sum64_lo;\n\nfunction sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + carry;\n  return hi >>> 0;\n}\nexports.sum64_4_hi = sum64_4_hi;\n\nfunction sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {\n  var lo = al + bl + cl + dl;\n  return lo >>> 0;\n}\nexports.sum64_4_lo = sum64_4_lo;\n\nfunction sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n  lo = (lo + el) >>> 0;\n  carry += lo < el ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + eh + carry;\n  return hi >>> 0;\n}\nexports.sum64_5_hi = sum64_5_hi;\n\nfunction sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var lo = al + bl + cl + dl + el;\n\n  return lo >>> 0;\n}\nexports.sum64_5_lo = sum64_5_lo;\n\nfunction rotr64_hi(ah, al, num) {\n  var r = (al << (32 - num)) | (ah >>> num);\n  return r >>> 0;\n}\nexports.rotr64_hi = rotr64_hi;\n\nfunction rotr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.rotr64_lo = rotr64_lo;\n\nfunction shr64_hi(ah, al, num) {\n  return ah >>> num;\n}\nexports.shr64_hi = shr64_hi;\n\nfunction shr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.shr64_lo = shr64_lo;\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction BlockHash() {\n  this.pending = null;\n  this.pendingTotal = 0;\n  this.blockSize = this.constructor.blockSize;\n  this.outSize = this.constructor.outSize;\n  this.hmacStrength = this.constructor.hmacStrength;\n  this.padLength = this.constructor.padLength / 8;\n  this.endian = 'big';\n\n  this._delta8 = this.blockSize / 8;\n  this._delta32 = this.blockSize / 32;\n}\nexports.BlockHash = BlockHash;\n\nBlockHash.prototype.update = function update(msg, enc) {\n  // Convert message to array, pad it, and join into 32bit blocks\n  msg = utils.toArray(msg, enc);\n  if (!this.pending)\n    this.pending = msg;\n  else\n    this.pending = this.pending.concat(msg);\n  this.pendingTotal += msg.length;\n\n  // Enough data, try updating\n  if (this.pending.length >= this._delta8) {\n    msg = this.pending;\n\n    // Process pending data in blocks\n    var r = msg.length % this._delta8;\n    this.pending = msg.slice(msg.length - r, msg.length);\n    if (this.pending.length === 0)\n      this.pending = null;\n\n    msg = utils.join32(msg, 0, msg.length - r, this.endian);\n    for (var i = 0; i < msg.length; i += this._delta32)\n      this._update(msg, i, i + this._delta32);\n  }\n\n  return this;\n};\n\nBlockHash.prototype.digest = function digest(enc) {\n  this.update(this._pad());\n  assert(this.pending === null);\n\n  return this._digest(enc);\n};\n\nBlockHash.prototype._pad = function pad() {\n  var len = this.pendingTotal;\n  var bytes = this._delta8;\n  var k = bytes - ((len + this.padLength) % bytes);\n  var res = new Array(k + this.padLength);\n  res[0] = 0x80;\n  for (var i = 1; i < k; i++)\n    res[i] = 0;\n\n  // Append length\n  len <<= 3;\n  if (this.endian === 'big') {\n    for (var t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = len & 0xff;\n  } else {\n    res[i++] = len & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n\n    for (t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n  }\n\n  return res;\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar rotr32 = utils.rotr32;\n\nfunction ft_1(s, x, y, z) {\n  if (s === 0)\n    return ch32(x, y, z);\n  if (s === 1 || s === 3)\n    return p32(x, y, z);\n  if (s === 2)\n    return maj32(x, y, z);\n}\nexports.ft_1 = ft_1;\n\nfunction ch32(x, y, z) {\n  return (x & y) ^ ((~x) & z);\n}\nexports.ch32 = ch32;\n\nfunction maj32(x, y, z) {\n  return (x & y) ^ (x & z) ^ (y & z);\n}\nexports.maj32 = maj32;\n\nfunction p32(x, y, z) {\n  return x ^ y ^ z;\n}\nexports.p32 = p32;\n\nfunction s0_256(x) {\n  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n}\nexports.s0_256 = s0_256;\n\nfunction s1_256(x) {\n  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n}\nexports.s1_256 = s1_256;\n\nfunction g0_256(x) {\n  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);\n}\nexports.g0_256 = g0_256;\n\nfunction g1_256(x) {\n  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);\n}\nexports.g1_256 = g1_256;\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_5 = utils.sum32_5;\nvar ft_1 = shaCommon.ft_1;\nvar BlockHash = common.BlockHash;\n\nvar sha1_K = [\n  0x5A827999, 0x6ED9EBA1,\n  0x8F1BBCDC, 0xCA62C1D6\n];\n\nfunction SHA1() {\n  if (!(this instanceof SHA1))\n    return new SHA1();\n\n  BlockHash.call(this);\n  this.h = [\n    0x67452301, 0xefcdab89, 0x98badcfe,\n    0x10325476, 0xc3d2e1f0 ];\n  this.W = new Array(80);\n}\n\nutils.inherits(SHA1, BlockHash);\nmodule.exports = SHA1;\n\nSHA1.blockSize = 512;\nSHA1.outSize = 160;\nSHA1.hmacStrength = 80;\nSHA1.padLength = 64;\n\nSHA1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n\n  for(; i < W.length; i++)\n    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n\n  for (i = 0; i < W.length; i++) {\n    var s = ~~(i / 20);\n    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);\n    e = d;\n    d = c;\n    c = rotl32(b, 30);\n    b = a;\n    a = t;\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n};\n\nSHA1.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\nvar assert = require('minimalistic-assert');\n\nvar sum32 = utils.sum32;\nvar sum32_4 = utils.sum32_4;\nvar sum32_5 = utils.sum32_5;\nvar ch32 = shaCommon.ch32;\nvar maj32 = shaCommon.maj32;\nvar s0_256 = shaCommon.s0_256;\nvar s1_256 = shaCommon.s1_256;\nvar g0_256 = shaCommon.g0_256;\nvar g1_256 = shaCommon.g1_256;\n\nvar BlockHash = common.BlockHash;\n\nvar sha256_K = [\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,\n  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,\n  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,\n  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,\n  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n];\n\nfunction SHA256() {\n  if (!(this instanceof SHA256))\n    return new SHA256();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,\n    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n  ];\n  this.k = sha256_K;\n  this.W = new Array(64);\n}\nutils.inherits(SHA256, BlockHash);\nmodule.exports = SHA256;\n\nSHA256.blockSize = 512;\nSHA256.outSize = 256;\nSHA256.hmacStrength = 192;\nSHA256.padLength = 64;\n\nSHA256.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i++)\n    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n  var f = this.h[5];\n  var g = this.h[6];\n  var h = this.h[7];\n\n  assert(this.k.length === W.length);\n  for (i = 0; i < W.length; i++) {\n    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);\n    var T2 = sum32(s0_256(a), maj32(a, b, c));\n    h = g;\n    g = f;\n    f = e;\n    e = sum32(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = sum32(T1, T2);\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n  this.h[5] = sum32(this.h[5], f);\n  this.h[6] = sum32(this.h[6], g);\n  this.h[7] = sum32(this.h[7], h);\n};\n\nSHA256.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar SHA256 = require('./256');\n\nfunction SHA224() {\n  if (!(this instanceof SHA224))\n    return new SHA224();\n\n  SHA256.call(this);\n  this.h = [\n    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,\n    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];\n}\nutils.inherits(SHA224, SHA256);\nmodule.exports = SHA224;\n\nSHA224.blockSize = 512;\nSHA224.outSize = 224;\nSHA224.hmacStrength = 192;\nSHA224.padLength = 64;\n\nSHA224.prototype._digest = function digest(enc) {\n  // Just truncate output\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 7), 'big');\n  else\n    return utils.split32(this.h.slice(0, 7), 'big');\n};\n\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar assert = require('minimalistic-assert');\n\nvar rotr64_hi = utils.rotr64_hi;\nvar rotr64_lo = utils.rotr64_lo;\nvar shr64_hi = utils.shr64_hi;\nvar shr64_lo = utils.shr64_lo;\nvar sum64 = utils.sum64;\nvar sum64_hi = utils.sum64_hi;\nvar sum64_lo = utils.sum64_lo;\nvar sum64_4_hi = utils.sum64_4_hi;\nvar sum64_4_lo = utils.sum64_4_lo;\nvar sum64_5_hi = utils.sum64_5_hi;\nvar sum64_5_lo = utils.sum64_5_lo;\n\nvar BlockHash = common.BlockHash;\n\nvar sha512_K = [\n  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n];\n\nfunction SHA512() {\n  if (!(this instanceof SHA512))\n    return new SHA512();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xf3bcc908,\n    0xbb67ae85, 0x84caa73b,\n    0x3c6ef372, 0xfe94f82b,\n    0xa54ff53a, 0x5f1d36f1,\n    0x510e527f, 0xade682d1,\n    0x9b05688c, 0x2b3e6c1f,\n    0x1f83d9ab, 0xfb41bd6b,\n    0x5be0cd19, 0x137e2179 ];\n  this.k = sha512_K;\n  this.W = new Array(160);\n}\nutils.inherits(SHA512, BlockHash);\nmodule.exports = SHA512;\n\nSHA512.blockSize = 1024;\nSHA512.outSize = 512;\nSHA512.hmacStrength = 192;\nSHA512.padLength = 128;\n\nSHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {\n  var W = this.W;\n\n  // 32 x 32bit words\n  for (var i = 0; i < 32; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i += 2) {\n    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2\n    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n    var c1_hi = W[i - 14];  // i - 7\n    var c1_lo = W[i - 13];\n    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15\n    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n    var c3_hi = W[i - 32];  // i - 16\n    var c3_lo = W[i - 31];\n\n    W[i] = sum64_4_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n    W[i + 1] = sum64_4_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n  }\n};\n\nSHA512.prototype._update = function _update(msg, start) {\n  this._prepareBlock(msg, start);\n\n  var W = this.W;\n\n  var ah = this.h[0];\n  var al = this.h[1];\n  var bh = this.h[2];\n  var bl = this.h[3];\n  var ch = this.h[4];\n  var cl = this.h[5];\n  var dh = this.h[6];\n  var dl = this.h[7];\n  var eh = this.h[8];\n  var el = this.h[9];\n  var fh = this.h[10];\n  var fl = this.h[11];\n  var gh = this.h[12];\n  var gl = this.h[13];\n  var hh = this.h[14];\n  var hl = this.h[15];\n\n  assert(this.k.length === W.length);\n  for (var i = 0; i < W.length; i += 2) {\n    var c0_hi = hh;\n    var c0_lo = hl;\n    var c1_hi = s1_512_hi(eh, el);\n    var c1_lo = s1_512_lo(eh, el);\n    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);\n    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n    var c3_hi = this.k[i];\n    var c3_lo = this.k[i + 1];\n    var c4_hi = W[i];\n    var c4_lo = W[i + 1];\n\n    var T1_hi = sum64_5_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n    var T1_lo = sum64_5_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n\n    c0_hi = s0_512_hi(ah, al);\n    c0_lo = s0_512_lo(ah, al);\n    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);\n    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n\n    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);\n    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);\n\n    hh = gh;\n    hl = gl;\n\n    gh = fh;\n    gl = fl;\n\n    fh = eh;\n    fl = el;\n\n    eh = sum64_hi(dh, dl, T1_hi, T1_lo);\n    el = sum64_lo(dl, dl, T1_hi, T1_lo);\n\n    dh = ch;\n    dl = cl;\n\n    ch = bh;\n    cl = bl;\n\n    bh = ah;\n    bl = al;\n\n    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);\n    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);\n  }\n\n  sum64(this.h, 0, ah, al);\n  sum64(this.h, 2, bh, bl);\n  sum64(this.h, 4, ch, cl);\n  sum64(this.h, 6, dh, dl);\n  sum64(this.h, 8, eh, el);\n  sum64(this.h, 10, fh, fl);\n  sum64(this.h, 12, gh, gl);\n  sum64(this.h, 14, hh, hl);\n};\n\nSHA512.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n\nfunction ch64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ ((~xh) & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction ch64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ ((~xl) & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 28);\n  var c1_hi = rotr64_hi(xl, xh, 2);  // 34\n  var c2_hi = rotr64_hi(xl, xh, 7);  // 39\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 28);\n  var c1_lo = rotr64_lo(xl, xh, 2);  // 34\n  var c2_lo = rotr64_lo(xl, xh, 7);  // 39\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 14);\n  var c1_hi = rotr64_hi(xh, xl, 18);\n  var c2_hi = rotr64_hi(xl, xh, 9);  // 41\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 14);\n  var c1_lo = rotr64_lo(xh, xl, 18);\n  var c2_lo = rotr64_lo(xl, xh, 9);  // 41\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 1);\n  var c1_hi = rotr64_hi(xh, xl, 8);\n  var c2_hi = shr64_hi(xh, xl, 7);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 1);\n  var c1_lo = rotr64_lo(xh, xl, 8);\n  var c2_lo = shr64_lo(xh, xl, 7);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 19);\n  var c1_hi = rotr64_hi(xl, xh, 29);  // 61\n  var c2_hi = shr64_hi(xh, xl, 6);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 19);\n  var c1_lo = rotr64_lo(xl, xh, 29);  // 61\n  var c2_lo = shr64_lo(xh, xl, 6);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n","'use strict';\n\nvar utils = require('../utils');\n\nvar SHA512 = require('./512');\n\nfunction SHA384() {\n  if (!(this instanceof SHA384))\n    return new SHA384();\n\n  SHA512.call(this);\n  this.h = [\n    0xcbbb9d5d, 0xc1059ed8,\n    0x629a292a, 0x367cd507,\n    0x9159015a, 0x3070dd17,\n    0x152fecd8, 0xf70e5939,\n    0x67332667, 0xffc00b31,\n    0x8eb44a87, 0x68581511,\n    0xdb0c2e0d, 0x64f98fa7,\n    0x47b5481d, 0xbefa4fa4 ];\n}\nutils.inherits(SHA384, SHA512);\nmodule.exports = SHA384;\n\nSHA384.blockSize = 1024;\nSHA384.outSize = 384;\nSHA384.hmacStrength = 192;\nSHA384.padLength = 128;\n\nSHA384.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 12), 'big');\n  else\n    return utils.split32(this.h.slice(0, 12), 'big');\n};\n","'use strict';\n\nexports.sha1 = require('./sha/1');\nexports.sha224 = require('./sha/224');\nexports.sha256 = require('./sha/256');\nexports.sha384 = require('./sha/384');\nexports.sha512 = require('./sha/512');\n","'use strict';\n\nvar utils = require('./utils');\nvar common = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_3 = utils.sum32_3;\nvar sum32_4 = utils.sum32_4;\nvar BlockHash = common.BlockHash;\n\nfunction RIPEMD160() {\n  if (!(this instanceof RIPEMD160))\n    return new RIPEMD160();\n\n  BlockHash.call(this);\n\n  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];\n  this.endian = 'little';\n}\nutils.inherits(RIPEMD160, BlockHash);\nexports.ripemd160 = RIPEMD160;\n\nRIPEMD160.blockSize = 512;\nRIPEMD160.outSize = 160;\nRIPEMD160.hmacStrength = 192;\nRIPEMD160.padLength = 64;\n\nRIPEMD160.prototype._update = function update(msg, start) {\n  var A = this.h[0];\n  var B = this.h[1];\n  var C = this.h[2];\n  var D = this.h[3];\n  var E = this.h[4];\n  var Ah = A;\n  var Bh = B;\n  var Ch = C;\n  var Dh = D;\n  var Eh = E;\n  for (var j = 0; j < 80; j++) {\n    var T = sum32(\n      rotl32(\n        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),\n        s[j]),\n      E);\n    A = E;\n    E = D;\n    D = rotl32(C, 10);\n    C = B;\n    B = T;\n    T = sum32(\n      rotl32(\n        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),\n        sh[j]),\n      Eh);\n    Ah = Eh;\n    Eh = Dh;\n    Dh = rotl32(Ch, 10);\n    Ch = Bh;\n    Bh = T;\n  }\n  T = sum32_3(this.h[1], C, Dh);\n  this.h[1] = sum32_3(this.h[2], D, Eh);\n  this.h[2] = sum32_3(this.h[3], E, Ah);\n  this.h[3] = sum32_3(this.h[4], A, Bh);\n  this.h[4] = sum32_3(this.h[0], B, Ch);\n  this.h[0] = T;\n};\n\nRIPEMD160.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'little');\n  else\n    return utils.split32(this.h, 'little');\n};\n\nfunction f(j, x, y, z) {\n  if (j <= 15)\n    return x ^ y ^ z;\n  else if (j <= 31)\n    return (x & y) | ((~x) & z);\n  else if (j <= 47)\n    return (x | (~y)) ^ z;\n  else if (j <= 63)\n    return (x & z) | (y & (~z));\n  else\n    return x ^ (y | (~z));\n}\n\nfunction K(j) {\n  if (j <= 15)\n    return 0x00000000;\n  else if (j <= 31)\n    return 0x5a827999;\n  else if (j <= 47)\n    return 0x6ed9eba1;\n  else if (j <= 63)\n    return 0x8f1bbcdc;\n  else\n    return 0xa953fd4e;\n}\n\nfunction Kh(j) {\n  if (j <= 15)\n    return 0x50a28be6;\n  else if (j <= 31)\n    return 0x5c4dd124;\n  else if (j <= 47)\n    return 0x6d703ef3;\n  else if (j <= 63)\n    return 0x7a6d76e9;\n  else\n    return 0x00000000;\n}\n\nvar r = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,\n  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,\n  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,\n  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13\n];\n\nvar rh = [\n  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,\n  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,\n  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,\n  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,\n  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11\n];\n\nvar s = [\n  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,\n  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,\n  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,\n  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,\n  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6\n];\n\nvar sh = [\n  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,\n  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,\n  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,\n  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,\n  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11\n];\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction Hmac(hash, key, enc) {\n  if (!(this instanceof Hmac))\n    return new Hmac(hash, key, enc);\n  this.Hash = hash;\n  this.blockSize = hash.blockSize / 8;\n  this.outSize = hash.outSize / 8;\n  this.inner = null;\n  this.outer = null;\n\n  this._init(utils.toArray(key, enc));\n}\nmodule.exports = Hmac;\n\nHmac.prototype._init = function init(key) {\n  // Shorten key, if needed\n  if (key.length > this.blockSize)\n    key = new this.Hash().update(key).digest();\n  assert(key.length <= this.blockSize);\n\n  // Add padding to key\n  for (var i = key.length; i < this.blockSize; i++)\n    key.push(0);\n\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x36;\n  this.inner = new this.Hash().update(key);\n\n  // 0x36 ^ 0x5c = 0x6a\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x6a;\n  this.outer = new this.Hash().update(key);\n};\n\nHmac.prototype.update = function update(msg, enc) {\n  this.inner.update(msg, enc);\n  return this;\n};\n\nHmac.prototype.digest = function digest(enc) {\n  this.outer.update(this.inner.digest());\n  return this.outer.digest(enc);\n};\n","var hash = exports;\n\nhash.utils = require('./hash/utils');\nhash.common = require('./hash/common');\nhash.sha = require('./hash/sha');\nhash.ripemd = require('./hash/ripemd');\nhash.hmac = require('./hash/hmac');\n\n// Proxy hash functions to the main object\nhash.sha1 = hash.sha.sha1;\nhash.sha256 = hash.sha.sha256;\nhash.sha224 = hash.sha.sha224;\nhash.sha384 = hash.sha.sha384;\nhash.sha512 = hash.sha.sha512;\nhash.ripemd160 = hash.ripemd.ripemd160;\n","\"use strict\";\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = { debug: 1, \"default\": 2, info: 2, warning: 3, error: 4, off: 5 };\nlet _logLevel = LogLevels[\"default\"];\nimport { version } from \"./_version\";\nlet _globalLogger = null;\nfunction _checkNormalize() {\n    try {\n        const missing = [];\n        // Make sure all forms of normalization are supported\n        [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\n            try {\n                if (\"test\".normalize(form) !== \"test\") {\n                    throw new Error(\"bad normalize\");\n                }\n                ;\n            }\n            catch (error) {\n                missing.push(form);\n            }\n        });\n        if (missing.length) {\n            throw new Error(\"missing \" + missing.join(\", \"));\n        }\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error(\"broken implementation\");\n        }\n    }\n    catch (error) {\n        return error.message;\n    }\n    return null;\n}\nconst _normalizeError = _checkNormalize();\nexport var LogLevel;\n(function (LogLevel) {\n    LogLevel[\"DEBUG\"] = \"DEBUG\";\n    LogLevel[\"INFO\"] = \"INFO\";\n    LogLevel[\"WARNING\"] = \"WARNING\";\n    LogLevel[\"ERROR\"] = \"ERROR\";\n    LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\nexport var ErrorCode;\n(function (ErrorCode) {\n    ///////////////////\n    // Generic Errors\n    // Unknown Error\n    ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n    // Not Implemented\n    ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\n    // Unsupported Operation\n    //   - operation\n    ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\n    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n    //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n    ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n    // Some sort of bad response from the server\n    ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n    // Timeout\n    ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\";\n    ///////////////////\n    // Operational  Errors\n    // Buffer Overrun\n    ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\n    // Numeric Fault\n    //   - operation: the operation being executed\n    //   - fault: the reason this faulted\n    ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\n    ///////////////////\n    // Argument Errors\n    // Missing new operator to an object\n    //  - name: The name of the class\n    ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\";\n    // Invalid argument (e.g. value is incompatible with type) to a function:\n    //   - argument: The argument name that was invalid\n    //   - value: The value of the argument\n    ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\n    // Missing argument to a function:\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\n    // Too many arguments\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\n    ///////////////////\n    // Blockchain Errors\n    // Call exception\n    //  - transaction: the transaction\n    //  - address?: the contract address\n    //  - args?: The arguments passed into the function\n    //  - method?: The Solidity method signature\n    //  - errorSignature?: The EIP848 error signature\n    //  - errorArgs?: The EIP848 error parameters\n    //  - reason: The reason (only for EIP848 \"Error(string)\")\n    ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\n    // Insufficient funds (< value + gasLimit * gasPrice)\n    //   - transaction: the transaction attempted\n    ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n    // Nonce has already been used\n    //   - transaction: the transaction attempted\n    ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\n    // The replacement fee for the transaction is too low\n    //   - transaction: the transaction attempted\n    ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\n    // The gas limit could not be estimated\n    //   - transaction: the transaction passed to estimateGas\n    ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n    // The transaction was replaced by one with a higher gas price\n    //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n    //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n    //   - hash: original transaction hash\n    //   - replacement: the full TransactionsResponse for the replacement\n    //   - receipt: the receipt of the replacement\n    ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n})(ErrorCode || (ErrorCode = {}));\n;\nconst HEX = \"0123456789abcdef\";\nexport class Logger {\n    constructor(version) {\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            value: version,\n            writable: false\n        });\n    }\n    _log(logLevel, args) {\n        const level = logLevel.toLowerCase();\n        if (LogLevels[level] == null) {\n            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n        }\n        if (_logLevel > LogLevels[level]) {\n            return;\n        }\n        console.log.apply(console, args);\n    }\n    debug(...args) {\n        this._log(Logger.levels.DEBUG, args);\n    }\n    info(...args) {\n        this._log(Logger.levels.INFO, args);\n    }\n    warn(...args) {\n        this._log(Logger.levels.WARNING, args);\n    }\n    makeError(message, code, params) {\n        // Errors are being censored\n        if (_censorErrors) {\n            return this.makeError(\"censored error\", code, {});\n        }\n        if (!code) {\n            code = Logger.errors.UNKNOWN_ERROR;\n        }\n        if (!params) {\n            params = {};\n        }\n        const messageDetails = [];\n        Object.keys(params).forEach((key) => {\n            const value = params[key];\n            try {\n                if (value instanceof Uint8Array) {\n                    let hex = \"\";\n                    for (let i = 0; i < value.length; i++) {\n                        hex += HEX[value[i] >> 4];\n                        hex += HEX[value[i] & 0x0f];\n                    }\n                    messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n                }\n                else {\n                    messageDetails.push(key + \"=\" + JSON.stringify(value));\n                }\n            }\n            catch (error) {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n            }\n        });\n        messageDetails.push(`code=${code}`);\n        messageDetails.push(`version=${this.version}`);\n        const reason = message;\n        if (messageDetails.length) {\n            message += \" (\" + messageDetails.join(\", \") + \")\";\n        }\n        // @TODO: Any??\n        const error = new Error(message);\n        error.reason = reason;\n        error.code = code;\n        Object.keys(params).forEach(function (key) {\n            error[key] = params[key];\n        });\n        return error;\n    }\n    throwError(message, code, params) {\n        throw this.makeError(message, code, params);\n    }\n    throwArgumentError(message, name, value) {\n        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n            argument: name,\n            value: value\n        });\n    }\n    assert(condition, message, code, params) {\n        if (!!condition) {\n            return;\n        }\n        this.throwError(message, code, params);\n    }\n    assertArgument(condition, message, name, value) {\n        if (!!condition) {\n            return;\n        }\n        this.throwArgumentError(message, name, value);\n    }\n    checkNormalize(message) {\n        if (message == null) {\n            message = \"platform missing String.prototype.normalize\";\n        }\n        if (_normalizeError) {\n            this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"String.prototype.normalize\", form: _normalizeError\n            });\n        }\n    }\n    checkSafeUint53(value, message) {\n        if (typeof (value) !== \"number\") {\n            return;\n        }\n        if (message == null) {\n            message = \"value not safe\";\n        }\n        if (value < 0 || value >= 0x1fffffffffffff) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"out-of-safe-range\",\n                value: value\n            });\n        }\n        if (value % 1) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"non-integer\",\n                value: value\n            });\n        }\n    }\n    checkArgumentCount(count, expectedCount, message) {\n        if (message) {\n            message = \": \" + message;\n        }\n        else {\n            message = \"\";\n        }\n        if (count < expectedCount) {\n            this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n        if (count > expectedCount) {\n            this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n    }\n    checkNew(target, kind) {\n        if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    checkAbstract(target, kind) {\n        if (target === kind) {\n            this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: \"new\" });\n        }\n        else if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    static globalLogger() {\n        if (!_globalLogger) {\n            _globalLogger = new Logger(version);\n        }\n        return _globalLogger;\n    }\n    static setCensorship(censorship, permanent) {\n        if (!censorship && permanent) {\n            this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        if (_permanentCensorErrors) {\n            if (!censorship) {\n                return;\n            }\n            this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        _censorErrors = !!censorship;\n        _permanentCensorErrors = !!permanent;\n    }\n    static setLogLevel(logLevel) {\n        const level = LogLevels[logLevel.toLowerCase()];\n        if (level == null) {\n            Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n            return;\n        }\n        _logLevel = level;\n    }\n    static from(version) {\n        return new Logger(version);\n    }\n}\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;\n//# sourceMappingURL=index.js.map","export const version = \"logger/5.5.0\";\n//# sourceMappingURL=_version.js.map","export const version = \"bytes/5.5.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n///////////////////////////////\nfunction isHexable(value) {\n    return !!(value.toHexString);\n}\nfunction addSlice(array) {\n    if (array.slice) {\n        return array;\n    }\n    array.slice = function () {\n        const args = Array.prototype.slice.call(arguments);\n        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n    };\n    return array;\n}\nexport function isBytesLike(value) {\n    return ((isHexString(value) && !(value.length % 2)) || isBytes(value));\n}\nfunction isInteger(value) {\n    return (typeof (value) === \"number\" && value == value && (value % 1) === 0);\n}\nexport function isBytes(value) {\n    if (value == null) {\n        return false;\n    }\n    if (value.constructor === Uint8Array) {\n        return true;\n    }\n    if (typeof (value) === \"string\") {\n        return false;\n    }\n    if (!isInteger(value.length) || value.length < 0) {\n        return false;\n    }\n    for (let i = 0; i < value.length; i++) {\n        const v = value[i];\n        if (!isInteger(v) || v < 0 || v >= 256) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function arrayify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid arrayify value\");\n        const result = [];\n        while (value) {\n            result.unshift(value & 0xff);\n            value = parseInt(String(value / 256));\n        }\n        if (result.length === 0) {\n            result.push(0);\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        value = value.toHexString();\n    }\n    if (isHexString(value)) {\n        let hex = value.substring(2);\n        if (hex.length % 2) {\n            if (options.hexPad === \"left\") {\n                hex = \"0x0\" + hex.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                hex += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        const result = [];\n        for (let i = 0; i < hex.length; i += 2) {\n            result.push(parseInt(hex.substring(i, i + 2), 16));\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (isBytes(value)) {\n        return addSlice(new Uint8Array(value));\n    }\n    return logger.throwArgumentError(\"invalid arrayify value\", \"value\", value);\n}\nexport function concat(items) {\n    const objects = items.map(item => arrayify(item));\n    const length = objects.reduce((accum, item) => (accum + item.length), 0);\n    const result = new Uint8Array(length);\n    objects.reduce((offset, object) => {\n        result.set(object, offset);\n        return offset + object.length;\n    }, 0);\n    return addSlice(result);\n}\nexport function stripZeros(value) {\n    let result = arrayify(value);\n    if (result.length === 0) {\n        return result;\n    }\n    // Find the first non-zero entry\n    let start = 0;\n    while (start < result.length && result[start] === 0) {\n        start++;\n    }\n    // If we started with zeros, strip them\n    if (start) {\n        result = result.slice(start);\n    }\n    return result;\n}\nexport function zeroPad(value, length) {\n    value = arrayify(value);\n    if (value.length > length) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[0]);\n    }\n    const result = new Uint8Array(length);\n    result.set(value, length - value.length);\n    return addSlice(result);\n}\nexport function isHexString(value, length) {\n    if (typeof (value) !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n        return false;\n    }\n    if (length && value.length !== 2 + 2 * length) {\n        return false;\n    }\n    return true;\n}\nconst HexCharacters = \"0123456789abcdef\";\nexport function hexlify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid hexlify value\");\n        let hex = \"\";\n        while (value) {\n            hex = HexCharacters[value & 0xf] + hex;\n            value = Math.floor(value / 16);\n        }\n        if (hex.length) {\n            if (hex.length % 2) {\n                hex = \"0\" + hex;\n            }\n            return \"0x\" + hex;\n        }\n        return \"0x00\";\n    }\n    if (typeof (value) === \"bigint\") {\n        value = value.toString(16);\n        if (value.length % 2) {\n            return (\"0x0\" + value);\n        }\n        return \"0x\" + value;\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        return value.toHexString();\n    }\n    if (isHexString(value)) {\n        if (value.length % 2) {\n            if (options.hexPad === \"left\") {\n                value = \"0x0\" + value.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                value += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        return value.toLowerCase();\n    }\n    if (isBytes(value)) {\n        let result = \"0x\";\n        for (let i = 0; i < value.length; i++) {\n            let v = value[i];\n            result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n        }\n        return result;\n    }\n    return logger.throwArgumentError(\"invalid hexlify value\", \"value\", value);\n}\n/*\nfunction unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {\n    if (typeof(value) === \"string\" && value.length % 2 && value.substring(0, 2) === \"0x\") {\n        return \"0x0\" + value.substring(2);\n    }\n    return value;\n}\n*/\nexport function hexDataLength(data) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        return null;\n    }\n    return (data.length - 2) / 2;\n}\nexport function hexDataSlice(data, offset, endOffset) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        logger.throwArgumentError(\"invalid hexData\", \"value\", data);\n    }\n    offset = 2 + 2 * offset;\n    if (endOffset != null) {\n        return \"0x\" + data.substring(offset, 2 + 2 * endOffset);\n    }\n    return \"0x\" + data.substring(offset);\n}\nexport function hexConcat(items) {\n    let result = \"0x\";\n    items.forEach((item) => {\n        result += hexlify(item).substring(2);\n    });\n    return result;\n}\nexport function hexValue(value) {\n    const trimmed = hexStripZeros(hexlify(value, { hexPad: \"left\" }));\n    if (trimmed === \"0x\") {\n        return \"0x0\";\n    }\n    return trimmed;\n}\nexport function hexStripZeros(value) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    value = value.substring(2);\n    let offset = 0;\n    while (offset < value.length && value[offset] === \"0\") {\n        offset++;\n    }\n    return \"0x\" + value.substring(offset);\n}\nexport function hexZeroPad(value, length) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    else if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    if (value.length > 2 * length + 2) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[1]);\n    }\n    while (value.length < 2 * length + 2) {\n        value = \"0x0\" + value.substring(2);\n    }\n    return value;\n}\nexport function splitSignature(signature) {\n    const result = {\n        r: \"0x\",\n        s: \"0x\",\n        _vs: \"0x\",\n        recoveryParam: 0,\n        v: 0\n    };\n    if (isBytesLike(signature)) {\n        const bytes = arrayify(signature);\n        if (bytes.length !== 65) {\n            logger.throwArgumentError(\"invalid signature string; must be 65 bytes\", \"signature\", signature);\n        }\n        // Get the r, s and v\n        result.r = hexlify(bytes.slice(0, 32));\n        result.s = hexlify(bytes.slice(32, 64));\n        result.v = bytes[64];\n        // Allow a recid to be used as the v\n        if (result.v < 27) {\n            if (result.v === 0 || result.v === 1) {\n                result.v += 27;\n            }\n            else {\n                logger.throwArgumentError(\"signature invalid v byte\", \"signature\", signature);\n            }\n        }\n        // Compute recoveryParam from v\n        result.recoveryParam = 1 - (result.v % 2);\n        // Compute _vs from recoveryParam and s\n        if (result.recoveryParam) {\n            bytes[32] |= 0x80;\n        }\n        result._vs = hexlify(bytes.slice(32, 64));\n    }\n    else {\n        result.r = signature.r;\n        result.s = signature.s;\n        result.v = signature.v;\n        result.recoveryParam = signature.recoveryParam;\n        result._vs = signature._vs;\n        // If the _vs is available, use it to populate missing s, v and recoveryParam\n        // and verify non-missing s, v and recoveryParam\n        if (result._vs != null) {\n            const vs = zeroPad(arrayify(result._vs), 32);\n            result._vs = hexlify(vs);\n            // Set or check the recid\n            const recoveryParam = ((vs[0] >= 128) ? 1 : 0);\n            if (result.recoveryParam == null) {\n                result.recoveryParam = recoveryParam;\n            }\n            else if (result.recoveryParam !== recoveryParam) {\n                logger.throwArgumentError(\"signature recoveryParam mismatch _vs\", \"signature\", signature);\n            }\n            // Set or check the s\n            vs[0] &= 0x7f;\n            const s = hexlify(vs);\n            if (result.s == null) {\n                result.s = s;\n            }\n            else if (result.s !== s) {\n                logger.throwArgumentError(\"signature v mismatch _vs\", \"signature\", signature);\n            }\n        }\n        // Use recid and v to populate each other\n        if (result.recoveryParam == null) {\n            if (result.v == null) {\n                logger.throwArgumentError(\"signature missing v and recoveryParam\", \"signature\", signature);\n            }\n            else if (result.v === 0 || result.v === 1) {\n                result.recoveryParam = result.v;\n            }\n            else {\n                result.recoveryParam = 1 - (result.v % 2);\n            }\n        }\n        else {\n            if (result.v == null) {\n                result.v = 27 + result.recoveryParam;\n            }\n            else {\n                const recId = (result.v === 0 || result.v === 1) ? result.v : (1 - (result.v % 2));\n                if (result.recoveryParam !== recId) {\n                    logger.throwArgumentError(\"signature recoveryParam mismatch v\", \"signature\", signature);\n                }\n            }\n        }\n        if (result.r == null || !isHexString(result.r)) {\n            logger.throwArgumentError(\"signature missing or invalid r\", \"signature\", signature);\n        }\n        else {\n            result.r = hexZeroPad(result.r, 32);\n        }\n        if (result.s == null || !isHexString(result.s)) {\n            logger.throwArgumentError(\"signature missing or invalid s\", \"signature\", signature);\n        }\n        else {\n            result.s = hexZeroPad(result.s, 32);\n        }\n        const vs = arrayify(result.s);\n        if (vs[0] >= 128) {\n            logger.throwArgumentError(\"signature s out of range\", \"signature\", signature);\n        }\n        if (result.recoveryParam) {\n            vs[0] |= 0x80;\n        }\n        const _vs = hexlify(vs);\n        if (result._vs) {\n            if (!isHexString(result._vs)) {\n                logger.throwArgumentError(\"signature invalid _vs\", \"signature\", signature);\n            }\n            result._vs = hexZeroPad(result._vs, 32);\n        }\n        // Set or check the _vs\n        if (result._vs == null) {\n            result._vs = _vs;\n        }\n        else if (result._vs !== _vs) {\n            logger.throwArgumentError(\"signature _vs mismatch v and s\", \"signature\", signature);\n        }\n    }\n    return result;\n}\nexport function joinSignature(signature) {\n    signature = splitSignature(signature);\n    return hexlify(concat([\n        signature.r,\n        signature.s,\n        (signature.recoveryParam ? \"0x1c\" : \"0x1b\")\n    ]));\n}\n//# sourceMappingURL=index.js.map","\"use strict\";\nimport hash from \"hash.js\";\n//const _ripemd160 = _hash.ripemd160;\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { SupportedAlgorithm } from \"./types\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport function ripemd160(data) {\n    return \"0x\" + (hash.ripemd160().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha256(data) {\n    return \"0x\" + (hash.sha256().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha512(data) {\n    return \"0x\" + (hash.sha512().update(arrayify(data)).digest(\"hex\"));\n}\nexport function computeHmac(algorithm, key, data) {\n    if (!SupportedAlgorithm[algorithm]) {\n        logger.throwError(\"unsupported algorithm \" + algorithm, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"hmac\",\n            algorithm: algorithm\n        });\n    }\n    return \"0x\" + hash.hmac(hash[algorithm], arrayify(key)).update(arrayify(data)).digest(\"hex\");\n}\n//# sourceMappingURL=sha2.js.map","export const version = \"sha2/5.5.0\";\n//# sourceMappingURL=_version.js.map","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport nacl from 'tweetnacl';\nimport {sha256} from '@ethersproject/sha2';\n\nimport {Struct, SOLANA_SCHEMA} from './util/borsh-schema';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Buffer\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != 32) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > 32) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Default public key value. (All zeros)\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key\n   */\n  toBytes(): Uint8Array {\n    return this.toBuffer();\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === 32) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const hash = sha256(new Uint8Array(buffer)).slice(2);\n    return new PublicKey(Buffer.from(hash, 'hex'));\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    let hash = sha256(new Uint8Array(buffer)).slice(2);\n    let publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n    if (is_on_curve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = await this.createProgramAddress(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkey: Uint8Array): boolean {\n    return is_on_curve(pubkey) == 1;\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n\n// @ts-ignore\nlet naclLowLevel = nacl.lowlevel;\n\n// Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\nfunction is_on_curve(p: any) {\n  var r = [\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n  ];\n\n  var t = naclLowLevel.gf(),\n    chk = naclLowLevel.gf(),\n    num = naclLowLevel.gf(),\n    den = naclLowLevel.gf(),\n    den2 = naclLowLevel.gf(),\n    den4 = naclLowLevel.gf(),\n    den6 = naclLowLevel.gf();\n\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([\n  0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7,\n  0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83,\n]);\nfunction neq25519(a: any, b: any) {\n  var c = new Uint8Array(32),\n    d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (\n  property: string = 'publicKey',\n): BufferLayout.Layout => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64'): BufferLayout.Layout => {\n  return BufferLayout.blob(8, property);\n};\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (property: string = 'string') => {\n  const rsl = BufferLayout.struct(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  rsl.decode = (buffer: any, offset: any) => {\n    const data = _decode(buffer, offset);\n    return data['chars'].toString('utf8');\n  };\n\n  rsl.encode = (str: any, buffer: any, offset: any) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, buffer, offset);\n  };\n\n  (rsl as any).alloc = (str: any) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rsl;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct(\n    [publicKey('staker'), publicKey('withdrawer')],\n    property,\n  );\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    if (item.span >= 0) {\n      alloc += item.span;\n    } else if (typeof item.alloc === 'function') {\n      alloc += item.alloc(fields[item.property]);\n    }\n  });\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PACKET_DATA_SIZE} from './transaction';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * The message header, identifying signed and read-only account\n */\nexport type MessageHeader = {\n  /**\n   * The number of signatures required for this message to be considered valid. The\n   * signatures must match the first `numRequiredSignatures` of `accountKeys`.\n   */\n  numRequiredSignatures: number;\n  /** The last `numReadonlySignedAccounts` of the signed keys are read-only accounts */\n  numReadonlySignedAccounts: number;\n  /** The last `numReadonlySignedAccounts` of the unsigned keys are read-only accounts */\n  numReadonlyUnsignedAccounts: number;\n};\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nconst PUBKEY_LENGTH = 32;\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    return (\n      index <\n        this.header.numRequiredSignatures -\n          this.header.numReadonlySignedAccounts ||\n      (index >= this.header.numRequiredSignatures &&\n        index <\n          this.accountKeys.length - this.header.numReadonlyUnsignedAccounts)\n    );\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = bs58.decode(instruction.data);\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: Buffer.from(accounts),\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift() as number;\n    const numReadonlySignedAccounts = byteArray.shift() as number;\n    const numReadonlyUnsignedAccounts = byteArray.shift() as number;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import nacl from 'tweetnacl';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {Message} from './message';\nimport {PublicKey} from './publickey';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\nimport invariant from './util/assert';\nimport type {Signer} from './keypair';\nimport type {Blockhash} from './blockhash';\nimport type {CompiledInstruction} from './message';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\n/**\n * Default (empty) signature\n *\n * Signatures are 64 bytes in length\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(64).fill(0);\n\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nconst SIGNATURE_LENGTH = 64;\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n *\n */\nexport type TransactionCtorFields = {\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash | null;\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts?: TransactionCtorFields) {\n    opts && Object.assign(this, opts);\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    const {nonceInfo} = this;\n    if (nonceInfo && this.instructions[0] != nonceInfo.nonceInstruction) {\n      this.recentBlockhash = nonceInfo.nonce;\n      this.instructions.unshift(nonceInfo.nonceInstruction);\n    }\n    const {recentBlockhash} = this;\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (this.instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < this.instructions.length; i++) {\n      if (this.instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    this.instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    accountMetas.sort(function (x, y) {\n      const pubkeySorting = x.pubkey\n        .toBase58()\n        .localeCompare(y.pubkey.toBase58());\n      const checkSigner = x.isSigner === y.isSigner ? 0 : x.isSigner ? -1 : 1;\n      const checkWritable =\n        x.isWritable === y.isWritable ? pubkeySorting : x.isWritable ? -1 : 1;\n      return checkSigner || checkWritable;\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const instructions: CompiledInstruction[] = this.instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    instructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n    this._verifySignatures(message.serialize(), true);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = nacl.sign.detached(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(signData: Buffer, requireAllSignatures: boolean): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (\n          !nacl.sign.detached.verify(signData, signature, publicKey.toBuffer())\n        ) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    return transaction;\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\n/**\n * @internal\n */\nexport type InstructionType = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData(type: InstructionType, fields?: any): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData(type: InstructionType, buffer: Buffer): any {\n  let data;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator'),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {encodeData, decodeData, InstructionType} from './instruction';\nimport * as Layout from './layout';\nimport {NONCE_ACCOUNT_LENGTH} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(instruction: TransactionInstruction): TransferParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): TransferWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount';\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS: {\n  [type in SystemInstructionType]: InstructionType;\n} = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('authorized'),\n    ]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('authorized'),\n    ]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: params.lamports,\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: params.lamports});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({pubkey: params.basePubkey, isSigner: true, isWritable: false});\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nimport {sleep} from './util/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './system-program';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var global = typeof self !== 'undefined' ? self : this;\nvar __self__ = (function () {\nfunction F() {\nthis.fetch = false;\nthis.DOMException = global.DOMException\n}\nF.prototype = global;\nreturn new F();\n})();\n(function(self) {\n\nvar irrelevant = (function (exports) {\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob:\n      'FileReader' in self &&\n      'Blob' in self &&\n      (function() {\n        try {\n          new Blob();\n          return true\n        } catch (e) {\n          return false\n        }\n      })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  };\n\n  function isDataView(obj) {\n    return obj && DataView.prototype.isPrototypeOf(obj)\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ];\n\n    var isArrayBufferView =\n      ArrayBuffer.isView ||\n      function(obj) {\n        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n      };\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name);\n    }\n    if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value);\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift();\n        return {done: value === undefined, value: value}\n      }\n    };\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      };\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {};\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value);\n      }, this);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1]);\n      }, this);\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name]);\n      }, this);\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name);\n    value = normalizeValue(value);\n    var oldValue = this.map[name];\n    this.map[name] = oldValue ? oldValue + ', ' + value : value;\n  };\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)];\n  };\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name);\n    return this.has(name) ? this.map[name] : null\n  };\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  };\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value);\n  };\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this);\n      }\n    }\n  };\n\n  Headers.prototype.keys = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push(name);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.values = function() {\n    var items = [];\n    this.forEach(function(value) {\n      items.push(value);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.entries = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push([name, value]);\n    });\n    return iteratorFor(items)\n  };\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true;\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result);\n      };\n      reader.onerror = function() {\n        reject(reader.error);\n      };\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsArrayBuffer(blob);\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsText(blob);\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf);\n    var chars = new Array(view.length);\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i]);\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength);\n      view.set(new Uint8Array(buf));\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false;\n\n    this._initBody = function(body) {\n      this._bodyInit = body;\n      if (!body) {\n        this._bodyText = '';\n      } else if (typeof body === 'string') {\n        this._bodyText = body;\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body;\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body;\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString();\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer);\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer]);\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body);\n      } else {\n        this._bodyText = body = Object.prototype.toString.call(body);\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8');\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type);\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        }\n      }\n    };\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this);\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      };\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      };\n    }\n\n    this.text = function() {\n      var rejected = consumed(this);\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    };\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      };\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    };\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase();\n    return methods.indexOf(upcased) > -1 ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {};\n    var body = options.body;\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url;\n      this.credentials = input.credentials;\n      if (!options.headers) {\n        this.headers = new Headers(input.headers);\n      }\n      this.method = input.method;\n      this.mode = input.mode;\n      this.signal = input.signal;\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit;\n        input.bodyUsed = true;\n      }\n    } else {\n      this.url = String(input);\n    }\n\n    this.credentials = options.credentials || this.credentials || 'same-origin';\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers);\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET');\n    this.mode = options.mode || this.mode || null;\n    this.signal = options.signal || this.signal;\n    this.referrer = null;\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body);\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, {body: this._bodyInit})\n  };\n\n  function decode(body) {\n    var form = new FormData();\n    body\n      .trim()\n      .split('&')\n      .forEach(function(bytes) {\n        if (bytes) {\n          var split = bytes.split('=');\n          var name = split.shift().replace(/\\+/g, ' ');\n          var value = split.join('=').replace(/\\+/g, ' ');\n          form.append(decodeURIComponent(name), decodeURIComponent(value));\n        }\n      });\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers();\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':');\n      var key = parts.shift().trim();\n      if (key) {\n        var value = parts.join(':').trim();\n        headers.append(key, value);\n      }\n    });\n    return headers\n  }\n\n  Body.call(Request.prototype);\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {};\n    }\n\n    this.type = 'default';\n    this.status = options.status === undefined ? 200 : options.status;\n    this.ok = this.status >= 200 && this.status < 300;\n    this.statusText = 'statusText' in options ? options.statusText : 'OK';\n    this.headers = new Headers(options.headers);\n    this.url = options.url || '';\n    this._initBody(bodyInit);\n  }\n\n  Body.call(Response.prototype);\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  };\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''});\n    response.type = 'error';\n    return response\n  };\n\n  var redirectStatuses = [301, 302, 303, 307, 308];\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  };\n\n  exports.DOMException = self.DOMException;\n  try {\n    new exports.DOMException();\n  } catch (err) {\n    exports.DOMException = function(message, name) {\n      this.message = message;\n      this.name = name;\n      var error = Error(message);\n      this.stack = error.stack;\n    };\n    exports.DOMException.prototype = Object.create(Error.prototype);\n    exports.DOMException.prototype.constructor = exports.DOMException;\n  }\n\n  function fetch(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init);\n\n      if (request.signal && request.signal.aborted) {\n        return reject(new exports.DOMException('Aborted', 'AbortError'))\n      }\n\n      var xhr = new XMLHttpRequest();\n\n      function abortXhr() {\n        xhr.abort();\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        };\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n        resolve(new Response(body, options));\n      };\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.onabort = function() {\n        reject(new exports.DOMException('Aborted', 'AbortError'));\n      };\n\n      xhr.open(request.method, request.url, true);\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true;\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false;\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob';\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value);\n      });\n\n      if (request.signal) {\n        request.signal.addEventListener('abort', abortXhr);\n\n        xhr.onreadystatechange = function() {\n          // DONE (success or failure)\n          if (xhr.readyState === 4) {\n            request.signal.removeEventListener('abort', abortXhr);\n          }\n        };\n      }\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n    })\n  }\n\n  fetch.polyfill = true;\n\n  if (!self.fetch) {\n    self.fetch = fetch;\n    self.Headers = Headers;\n    self.Request = Request;\n    self.Response = Response;\n  }\n\n  exports.Headers = Headers;\n  exports.Request = Request;\n  exports.Response = Response;\n  exports.fetch = fetch;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n\n}({}));\n})(__self__);\n__self__.fetch.ponyfill = true;\n// Remove \"polyfill\" property added by whatwg-fetch\ndelete __self__.fetch.polyfill;\n// Choose between native implementation (global) or custom implementation (__self__)\n// var ctx = global.fetch ? global : __self__;\nvar ctx = __self__; // this line disable service worker support temporarily\nexports = ctx.fetch // To enable: import fetch from 'cross-fetch'\nexports.default = ctx.fetch // For TypeScript consumers without esModuleInterop.\nexports.fetch = ctx.fetch // To enable: import {fetch} from 'cross-fetch'\nexports.Headers = ctx.Headers\nexports.Request = ctx.Request\nexports.Response = ctx.Response\nmodule.exports = exports\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport fetch from 'cross-fetch';\nimport type {Response} from 'cross-fetch';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {IWSRequestParams} from 'rpc-websockets/dist/lib/client';\n\nimport {AgentManager} from './agent-manager';\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError} from './errors';\nimport {NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport {MS_PER_SLOT} from './timing';\nimport {Transaction} from './transaction';\nimport {Message} from './message';\nimport assert from './util/assert';\nimport {sleep} from './util/sleep';\nimport {promiseTimeout} from './util/promise-timeout';\nimport {toBuffer} from './util/to-buffer';\nimport {makeWebsocketUrl} from './util/url';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => any;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => any;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n      }),\n    ),\n  ),\n);\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n};\n\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A confirmed transaction on the ledger\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A ConfirmedBlock on the ledger\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  useHttps: boolean,\n  httpHeaders?: HttpHeaders,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n): RpcClient {\n  let agentManager: AgentManager | undefined;\n  if (!process.env.BROWSER) {\n    agentManager = new AgentManager(useHttps);\n  }\n\n  let fetchWithMiddleware:\n    | ((url: string, options: any) => Promise<Response>)\n    | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (url: string, options: any) => {\n      const modifiedFetchArgs = await new Promise<[string, any]>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(url, options, (modifiedUrl, modifiedOptions) =>\n              resolve([modifiedUrl, modifiedOptions]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = agentManager ? agentManager.requestStart() : undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    } finally {\n      agentManager && agentManager.requestEnd();\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n  }),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(\n      pick({\n        pubkey: PublicKeyFromString,\n        signer: boolean(),\n        writable: boolean(),\n      }),\n    ),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64) */\n  encoding?: 'base64' | 'jsonParsed';\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * @internal\n */\ntype SubscriptionId = 'subscribing' | number;\n\n/**\n * @internal\n */\ntype AccountSubscriptionInfo = {\n  publicKey: string; // PublicKey of the account as a base 58 string\n  callback: AccountChangeCallback;\n  commitment?: Commitment;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * @internal\n */\ntype ProgramAccountSubscriptionInfo = {\n  programId: string; // PublicKey of the program as a base 58 string\n  callback: ProgramAccountChangeCallback;\n  commitment?: Commitment;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * @internal\n */\ntype SlotSubscriptionInfo = {\n  callback: SlotChangeCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * @private\n */\ntype SlotUpdateSubscriptionInfo = {\n  callback: SlotUpdateCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * @internal\n */\ntype SignatureSubscriptionInfo = {\n  signature: TransactionSignature; // TransactionSignature as a base 58 string\n  callback: SignatureSubscriptionCallback;\n  options?: SignatureSubscriptionOptions;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\ntype RootSubscriptionInfo = {\n  callback: RootChangeCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * @private\n */\ntype LogsSubscriptionInfo = {\n  callback: LogsCallback;\n  filter: LogsFilter;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n  commitment?: Commitment;\n};\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {[header: string]: string};\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  url: string,\n  options: any,\n  fetch: (modifiedUrl: string, modifiedOptions: any) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retring calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    recentBlockhash: Blockhash | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    recentBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ _accountChangeSubscriptionCounter: number = 0;\n  /** @internal */ _accountChangeSubscriptions: {\n    [id: number]: AccountSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _programAccountChangeSubscriptionCounter: number = 0;\n  /** @internal */ _programAccountChangeSubscriptions: {\n    [id: number]: ProgramAccountSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _rootSubscriptionCounter: number = 0;\n  /** @internal */ _rootSubscriptions: {\n    [id: number]: RootSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _signatureSubscriptionCounter: number = 0;\n  /** @internal */ _signatureSubscriptions: {\n    [id: number]: SignatureSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _slotSubscriptionCounter: number = 0;\n  /** @internal */ _slotSubscriptions: {\n    [id: number]: SlotSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _logsSubscriptionCounter: number = 0;\n  /** @internal */ _logsSubscriptions: {\n    [id: number]: LogsSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _slotUpdateSubscriptionCounter: number = 0;\n  /** @internal */ _slotUpdateSubscriptions: {\n    [id: number]: SlotUpdateSubscriptionInfo;\n  } = {};\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let url = new URL(endpoint);\n    const useHttps = url.protocol === 'https:';\n\n    let wsEndpoint;\n    let httpHeaders;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n\n    this._rpcEndpoint = endpoint;\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      url.toString(),\n      useHttps,\n      httpHeaders,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get balance for ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get block time for slot ' + slot + ': ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get minimum ledger slot: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get first available block: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error('failed to get token supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token account balance: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get largest accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token largest accounts: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info for accounts ' + keys + ': ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitment?: Commitment,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitment,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined,\n      epoch !== undefined ? {epoch} : undefined,\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new Error(\n        `failed to get Stake Activation ${publicKey.toBase58()}: ${\n          res.error.message\n        }`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const extra: Pick<GetProgramAccountsConfig, 'dataSlice' | 'filters'> = {};\n\n    let commitment;\n    let encoding;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n        encoding = configOrCommitment.encoding;\n\n        if (configOrCommitment.dataSlice) {\n          extra.dataSlice = configOrCommitment.dataSlice;\n        }\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const extra: Pick<GetParsedProgramAccountsConfig, 'filters'> = {};\n\n    let commitment;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Confirm the transaction identified by the specified signature.\n   */\n  async confirmTransaction(\n    signature: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let decodedSignature;\n    try {\n      decodedSignature = bs58.decode(signature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + signature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    const start = Date.now();\n    const subscriptionCommitment = commitment || this.commitment;\n\n    let subscriptionId;\n    let response: RpcResponseAndContext<SignatureResult> | null = null;\n    const confirmPromise = new Promise((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            subscriptionId = undefined;\n            response = {\n              context,\n              value: result,\n            };\n            resolve(null);\n          },\n          subscriptionCommitment,\n        );\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n    let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n    switch (subscriptionCommitment) {\n      case 'processed':\n      case 'recent':\n      case 'single':\n      case 'confirmed':\n      case 'singleGossip': {\n        timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n        break;\n      }\n      // exhaust enums to ensure full coverage\n      case 'finalized':\n      case 'max':\n      case 'root':\n    }\n\n    try {\n      await promiseTimeout(confirmPromise, timeoutMs);\n    } finally {\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n\n    if (response === null) {\n      const duration = (Date.now() - start) / 1000;\n      throw new Error(\n        `Transaction was not confirmed in ${duration.toFixed(\n          2,\n        )} seconds. It is unknown if it succeeded or failed. Check signature ${signature} using the Solana Explorer or CLI tools.`,\n      );\n    }\n\n    return response;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new Error('failed to get cluster nodes: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new Error('failed to get vote accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(commitment?: Commitment): Promise<string> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get slot leader: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new Error('failed to get slot leaders: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get signature status: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get transaction count: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitment?: Commitment,\n  ): Promise<(InflationReward | null)[]> {\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined,\n      {\n        epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation reward: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(commitment?: Commitment): Promise<EpochInfo> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch info: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch schedule: ' + res.error.message);\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get leader schedule: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; feeCalculator: FeeCalculator}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get recent blockhash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const args = this._buildArgs(limit ? [limit] : []);\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get recent performance samples: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get fee calculator: ' + res.error.message);\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: Message,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const wireMessage = message.serialize().toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result as unknown as RpcResponseAndContext<number>;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, lastValidBlockHeight: number}>}\n   */\n  async getLatestBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; lastValidBlockHeight: number}> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, lastValidBlockHeight: number}>}\n   */\n  async getLatestBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; lastValidBlockHeight: number}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get latest blockhash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new Error('failed to get version: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get genesis hash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  async getBlock(\n    slot: number,\n    opts?: {commitment?: Finality},\n  ): Promise<BlockResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  async getTransaction(\n    signature: string,\n    opts?: {commitment?: Finality},\n  ): Promise<TransactionResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: new Message(result.transaction.message),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error('failed to get transactions: ' + res.error.message);\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new Error('failed to get blocks: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get block: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed transaction: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error(\n          'failed to get confirmed transactions: ' + res.error.message,\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitment,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'airdrop to ' + to.toBase58() + ' failed: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _recentBlockhash(disableCache: boolean): Promise<Blockhash> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.recentBlockhash !== null && !expired) {\n        return this._blockhashInfo.recentBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<Blockhash> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      for (let i = 0; i < 50; i++) {\n        const {blockhash} = await this.getRecentBlockhash('finalized');\n\n        if (this._blockhashInfo.recentBlockhash != blockhash) {\n          this._blockhashInfo = {\n            recentBlockhash: blockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return blockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * Simulate a transaction\n   */\n  async simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      transaction = transactionOrMessage;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n    }\n\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   */\n  async sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._resetSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  async _subscribe(\n    sub: {subscriptionId: SubscriptionId | null},\n    rpcMethod: string,\n    rpcArgs: IWSRequestParams,\n  ) {\n    if (sub.subscriptionId == null) {\n      sub.subscriptionId = 'subscribing';\n      try {\n        const id = await this._rpcWebSocket.call(rpcMethod, rpcArgs);\n        if (typeof id === 'number' && sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = id;\n        }\n      } catch (err) {\n        if (sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = null;\n        }\n        if (err instanceof Error) {\n          console.error(\n            `${rpcMethod} error for argument`,\n            rpcArgs,\n            err.message,\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  async _unsubscribe(\n    sub: {subscriptionId: SubscriptionId | null},\n    rpcMethod: string,\n  ) {\n    const subscriptionId = sub.subscriptionId;\n    if (subscriptionId != null && typeof subscriptionId != 'string') {\n      const unsubscribeId: number = subscriptionId;\n      try {\n        await this._rpcWebSocket.call(rpcMethod, [unsubscribeId]);\n      } catch (err) {\n        if (err instanceof Error) {\n          console.error(`${rpcMethod} error:`, err.message);\n        }\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _resetSubscriptions() {\n    Object.values(this._accountChangeSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._programAccountChangeSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._rootSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._signatureSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._slotSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._slotUpdateSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _updateSubscriptions() {\n    const accountKeys = Object.keys(this._accountChangeSubscriptions).map(\n      Number,\n    );\n    const programKeys = Object.keys(\n      this._programAccountChangeSubscriptions,\n    ).map(Number);\n    const slotKeys = Object.keys(this._slotSubscriptions).map(Number);\n    const slotUpdateKeys = Object.keys(this._slotUpdateSubscriptions).map(\n      Number,\n    );\n    const signatureKeys = Object.keys(this._signatureSubscriptions).map(Number);\n    const rootKeys = Object.keys(this._rootSubscriptions).map(Number);\n    const logsKeys = Object.keys(this._logsSubscriptions).map(Number);\n    if (\n      accountKeys.length === 0 &&\n      programKeys.length === 0 &&\n      slotKeys.length === 0 &&\n      slotUpdateKeys.length === 0 &&\n      signatureKeys.length === 0 &&\n      rootKeys.length === 0 &&\n      logsKeys.length === 0\n    ) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    for (let id of accountKeys) {\n      const sub = this._accountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'accountSubscribe',\n        this._buildArgs([sub.publicKey], sub.commitment, 'base64'),\n      );\n    }\n\n    for (let id of programKeys) {\n      const sub = this._programAccountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'programSubscribe',\n        this._buildArgs([sub.programId], sub.commitment, 'base64', {\n          filters: sub.filters,\n        }),\n      );\n    }\n\n    for (let id of slotKeys) {\n      const sub = this._slotSubscriptions[id];\n      this._subscribe(sub, 'slotSubscribe', []);\n    }\n\n    for (let id of slotUpdateKeys) {\n      const sub = this._slotUpdateSubscriptions[id];\n      this._subscribe(sub, 'slotsUpdatesSubscribe', []);\n    }\n\n    for (let id of signatureKeys) {\n      const sub = this._signatureSubscriptions[id];\n      const args: any[] = [sub.signature];\n      if (sub.options) args.push(sub.options);\n      this._subscribe(sub, 'signatureSubscribe', args);\n    }\n\n    for (let id of rootKeys) {\n      const sub = this._rootSubscriptions[id];\n      this._subscribe(sub, 'rootSubscribe', []);\n    }\n\n    for (let id of logsKeys) {\n      const sub = this._logsSubscriptions[id];\n      let filter;\n      if (typeof sub.filter === 'object') {\n        filter = {mentions: [sub.filter.toString()]};\n      } else {\n        filter = sub.filter;\n      }\n      this._subscribe(\n        sub,\n        'logsSubscribe',\n        this._buildArgs([filter], sub.commitment),\n      );\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const res = create(notification, AccountNotificationResult);\n    for (const sub of Object.values(this._accountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._accountChangeSubscriptionCounter;\n    this._accountChangeSubscriptions[id] = {\n      publicKey: publicKey.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeAccountChangeListener(id: number): Promise<void> {\n    if (this._accountChangeSubscriptions[id]) {\n      const subInfo = this._accountChangeSubscriptions[id];\n      delete this._accountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'accountUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown account change id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const res = create(notification, ProgramAccountNotificationResult);\n    for (const sub of Object.values(this._programAccountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        const {value, context} = res.result;\n        sub.callback(\n          {\n            accountId: value.pubkey,\n            accountInfo: value.account,\n          },\n          context,\n        );\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): number {\n    const id = ++this._programAccountChangeSubscriptionCounter;\n    this._programAccountChangeSubscriptions[id] = {\n      programId: programId.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n      filters,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(id: number): Promise<void> {\n    if (this._programAccountChangeSubscriptions[id]) {\n      const subInfo = this._programAccountChangeSubscriptions[id];\n      delete this._programAccountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'programUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown program account change id: ${id}`);\n    }\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._logsSubscriptionCounter;\n    this._logsSubscriptions[id] = {\n      filter,\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id subscription id to deregister.\n   */\n  async removeOnLogsListener(id: number): Promise<void> {\n    if (!this._logsSubscriptions[id]) {\n      throw new Error(`Unknown logs id: ${id}`);\n    }\n    const subInfo = this._logsSubscriptions[id];\n    delete this._logsSubscriptions[id];\n    await this._unsubscribe(subInfo, 'logsUnsubscribe');\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const res = create(notification, LogsNotificationResult);\n    const keys = Object.keys(this._logsSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._logsSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const res = create(notification, SlotNotificationResult);\n    for (const sub of Object.values(this._slotSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): number {\n    const id = ++this._slotSubscriptionCounter;\n    this._slotSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSlotChangeListener(id: number): Promise<void> {\n    if (this._slotSubscriptions[id]) {\n      const subInfo = this._slotSubscriptions[id];\n      delete this._slotSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot change id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const res = create(notification, SlotUpdateNotificationResult);\n    for (const sub of Object.values(this._slotUpdateSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): number {\n    const id = ++this._slotUpdateSubscriptionCounter;\n    this._slotUpdateSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSlotUpdateListener(id: number): Promise<void> {\n    if (this._slotUpdateSubscriptions[id]) {\n      const subInfo = this._slotUpdateSubscriptions[id];\n      delete this._slotUpdateSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotsUpdatesUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot update id: ${id}`);\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const res = create(notification, SignatureNotificationResult);\n    for (const [id, sub] of Object.entries(this._signatureSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        if (res.result.value === 'receivedSignature') {\n          sub.callback(\n            {\n              type: 'received',\n            },\n            res.result.context,\n          );\n        } else {\n          // Signatures subscriptions are auto-removed by the RPC service so\n          // no need to explicitly send an unsubscribe message\n          delete this._signatureSubscriptions[Number(id)];\n          this._updateSubscriptions();\n          sub.callback(\n            {\n              type: 'status',\n              result: res.result.value,\n            },\n            res.result.context,\n          );\n        }\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback: (notification, context) => {\n        if (notification.type === 'status') {\n          callback(notification.result, context);\n        }\n      },\n      options: {commitment},\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): number {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback,\n      options,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSignatureListener(id: number): Promise<void> {\n    if (this._signatureSubscriptions[id]) {\n      const subInfo = this._signatureSubscriptions[id];\n      delete this._signatureSubscriptions[id];\n      await this._unsubscribe(subInfo, 'signatureUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown signature result id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const res = create(notification, RootNotificationResult);\n    for (const sub of Object.values(this._rootSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): number {\n    const id = ++this._rootSubscriptionCounter;\n    this._rootSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeRootChangeListener(id: number): Promise<void> {\n    if (this._rootSubscriptions[id]) {\n      const subInfo = this._rootSubscriptions[id];\n      delete this._rootSubscriptions[id];\n      await this._unsubscribe(subInfo, 'rootUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown root change id: ${id}`);\n    }\n  }\n}\n","import nacl from 'tweetnacl';\n\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    if (keypair) {\n      this._keypair = keypair;\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(nacl.sign.keyPair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    const keypair = nacl.sign.keyPair.fromSecretKey(secretKey);\n    if (!options || !options.skipValidation) {\n      const encoder = new TextEncoder();\n      const signData = encoder.encode('@solana/web3.js-validation-v1');\n      const signature = nacl.sign.detached(signData, keypair.secretKey);\n      if (!nacl.sign.detached.verify(signData, signature, keypair.publicKey)) {\n        throw new Error('provided secretKey is invalid');\n      }\n    }\n    return new Keypair(keypair);\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    return new Keypair(nacl.sign.keyPair.fromSeed(seed));\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return this._keypair.secretKey;\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport nacl from 'tweetnacl';\n\nimport {Keypair} from './keypair';\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        publicKeyOffset,\n        publicKeyInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = nacl.sign.detached(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {encodeData, decodeData, InstructionType} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  | 'AuthorizeWithSeed'\n  | 'Authorize'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Split'\n  | 'Withdraw'\n  | 'Merge';\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS: {\n  [type in StakeInstructionType]: InstructionType;\n} = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n      Layout.rustString('authoritySeed'),\n      Layout.publicKey('authorityOwner'),\n    ]),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `std::mem::size_of::<StakeState>()`:\n   * https://docs.rs/solana-stake-program/1.4.4/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport secp256k1 from 'secp256k1';\nimport sha3 from 'js-sha3';\n\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\nimport {toBuffer} from './util/to-buffer';\n\nconst {publicKeyCreate, ecdsaSign} = secp256k1;\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(\n        sha3.keccak_256.update(toBuffer(publicKey)).digest(),\n      ).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(\n        sha3.keccak_256.update(toBuffer(message)).digest(),\n      );\n      const {signature, recid: recoveryId} = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './util/shortvec-encoding';\nimport {PublicKey} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    const PUBKEY_LENGTH = 32;\n\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './util/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = {\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n};\n\nexport type AuthorizedVoter = {\n  epoch: number;\n  authorizedVoter: PublicKey;\n};\n\nexport type PriorVoter = {\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n};\n\nexport type BlockTimestamp = {\n  slot: number;\n  timetamp: number;\n};\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({epoch, authorizedVoter}: AuthorizedVoter) {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoter) {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({\n  buf,\n  idx,\n  isEmpty,\n}: {\n  buf: PriorVoter[];\n  idx: number;\n  isEmpty: boolean;\n}): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [...buf.slice(idx + 1).map(parsePriorVoters), ...buf.slice(0, idx)];\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {encodeData, decodeData, InstructionType} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  | 'Authorize'\n  | 'InitializeAccount'\n  | 'Withdraw';\n\nconst VOTE_INSTRUCTION_LAYOUTS: {\n  [type in VoteInstructionType]: InstructionType;\n} = Object.freeze({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   */\n  static space: number = 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import EventEmitter from 'eventemitter3';\nimport { PublicKey } from '@solana/web3.js';\nimport bs58 from 'bs58';\n\nexport default class Wallet extends EventEmitter {\n  constructor(provider, network) {\n    super();\n    if (isInjectedProvider(provider)) {\n      this._injectedProvider = provider;\n    } else if (isString(provider)) {\n      this._providerUrl = new URL(provider);\n      this._providerUrl.hash = new URLSearchParams({\n        origin: window.location.origin,\n        network,\n      }).toString();\n    } else {\n      throw new Error(\n        'provider parameter must be an injected provider or a URL string.',\n      );\n    }\n    this._network = network;\n    this._publicKey = null;\n    this._autoApprove = false;\n    this._popup = null;\n    this._handlerAdded = false;\n    this._nextRequestId = 1;\n    this._responsePromises = new Map();\n  }\n\n  _handleMessage = (e) => {\n    if (\n      (this._injectedProvider && e.source === window) ||\n      (e.origin === this._providerUrl.origin && e.source === this._popup)\n    ) {\n      if (e.data.method === 'connected') {\n        const newPublicKey = new PublicKey(e.data.params.publicKey);\n        if (!this._publicKey || !this._publicKey.equals(newPublicKey)) {\n          if (this._publicKey && !this._publicKey.equals(newPublicKey)) {\n            this._handleDisconnect();\n          }\n          this._publicKey = newPublicKey;\n          this._autoApprove = !!e.data.params.autoApprove;\n          this.emit('connect', this._publicKey);\n        }\n      } else if (e.data.method === 'disconnected') {\n        this._handleDisconnect();\n      } else if (e.data.result || e.data.error) {\n        if (this._responsePromises.has(e.data.id)) {\n          const [resolve, reject] = this._responsePromises.get(e.data.id);\n          if (e.data.result) {\n            resolve(e.data.result);\n          } else {\n            reject(new Error(e.data.error));\n          }\n        }\n      }\n    }\n  };\n\n  _handleConnect = () => {\n    if (!this._handlerAdded) {\n      this._handlerAdded = true;\n      window.addEventListener('message', this._handleMessage);\n      window.addEventListener('beforeunload', this.disconnect);\n    }\n    if (this._injectedProvider) {\n      return new Promise((resolve) => {\n        this._sendRequest('connect', {});\n        resolve();\n      });\n    } else {\n      window.name = 'parent';\n      this._popup = window.open(\n        this._providerUrl.toString(),\n        '_blank',\n        'location,resizable,width=460,height=675',\n      );\n      return new Promise((resolve) => {\n        this.once('connect', resolve);\n      });\n    }\n  };\n\n  _handleDisconnect = () => {\n    if (this._handlerAdded) {\n      this._handlerAdded = false;\n      window.removeEventListener('message', this._handleMessage);\n      window.removeEventListener('beforeunload', this.disconnect);\n    }\n    if (this._publicKey) {\n      this._publicKey = null;\n      this.emit('disconnect');\n    }\n    this._responsePromises.forEach(([resolve, reject], id) => {\n      this._responsePromises.delete(id);\n      reject('Wallet disconnected');\n    });\n  };\n\n  _sendRequest = async (method, params) => {\n    if (method !== 'connect' && !this.connected) {\n      throw new Error('Wallet not connected');\n    }\n    const requestId = this._nextRequestId;\n    ++this._nextRequestId;\n    return new Promise((resolve, reject) => {\n      this._responsePromises.set(requestId, [resolve, reject]);\n      if (this._injectedProvider) {\n        this._injectedProvider.postMessage({\n          jsonrpc: '2.0',\n          id: requestId,\n          method,\n          params: {\n            network: this._network,\n            ...params,\n          },\n        });\n      } else {\n        this._popup.postMessage(\n          {\n            jsonrpc: '2.0',\n            id: requestId,\n            method,\n            params,\n          },\n          this._providerUrl.origin,\n        );\n\n        if (!this.autoApprove) {\n          this._popup.focus();\n        }\n      }\n    });\n  };\n\n  get publicKey() {\n    return this._publicKey;\n  }\n\n  get connected() {\n    return this._publicKey !== null;\n  }\n\n  get autoApprove() {\n    return this._autoApprove;\n  }\n\n  connect = () => {\n    if (this._popup) {\n      this._popup.close();\n    }\n    return this._handleConnect();\n  };\n\n  disconnect = async () => {\n    if (this._injectedProvider) {\n      await this._sendRequest('disconnect', {});\n    }\n    if (this._popup) {\n      this._popup.close();\n    }\n    this._handleDisconnect();\n  };\n\n  sign = async (data, display) => {\n    if (!(data instanceof Uint8Array)) {\n      throw new Error('Data must be an instance of Uint8Array');\n    }\n\n    const response = await this._sendRequest('sign', {\n      data,\n      display,\n    });\n    const signature = bs58.decode(response.signature);\n    const publicKey = new PublicKey(response.publicKey);\n    return {\n      signature,\n      publicKey,\n    };\n  };\n\n  signTransaction = async (transaction) => {\n    const response = await this._sendRequest('signTransaction', {\n      message: bs58.encode(transaction.serializeMessage()),\n    });\n    const signature = bs58.decode(response.signature);\n    const publicKey = new PublicKey(response.publicKey);\n    transaction.addSignature(publicKey, signature);\n    return transaction;\n  };\n\n  signAllTransactions = async (transactions) => {\n    const response = await this._sendRequest('signAllTransactions', {\n      messages: transactions.map((tx) => bs58.encode(tx.serializeMessage())),\n    });\n    const signatures = response.signatures.map((s) => bs58.decode(s));\n    const publicKey = new PublicKey(response.publicKey);\n    transactions = transactions.map((tx, idx) => {\n      tx.addSignature(publicKey, signatures[idx]);\n      return tx;\n    });\n    return transactions;\n  };\n}\n\nfunction isString(a) {\n  return typeof a === 'string';\n}\n\nfunction isInjectedProvider(a) {\n  return isObject(a) && isFunction(a.postMessage);\n}\n\nfunction isObject(a) {\n  return typeof a === 'object' && a !== null;\n}\n\nfunction isFunction(a) {\n  return typeof a === 'function';\n}\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport WalletAdapter from './base';\nimport Wallet from '@project-serum/sol-wallet-adapter';\nvar WebAdapter = /** @class */ (function (_super) {\n    __extends(WebAdapter, _super);\n    // @ts-ignore\n    function WebAdapter(iframe, network, provider) {\n        var _this = _super.call(this) || this;\n        _this._instance = null;\n        // @ts-ignore\n        _this.handleMessage = function (data) {\n            // nothing to do here\n        };\n        _this._handleConnect = function () {\n            _this.emit('connect');\n        };\n        _this._handleDisconnect = function () {\n            window.clearInterval(_this._pollTimer);\n            _this.emit('disconnect');\n        };\n        _this._network = network;\n        _this._provider = provider;\n        return _this;\n    }\n    Object.defineProperty(WebAdapter.prototype, \"publicKey\", {\n        get: function () {\n            return this._instance.publicKey || null;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(WebAdapter.prototype, \"connected\", {\n        get: function () {\n            return this._instance.connected || false;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    WebAdapter.prototype.connect = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        this._instance = new Wallet(this._provider, this._network);\n                        this._instance.on('connect', this._handleConnect);\n                        this._instance.on('disconnect', this._handleDisconnect);\n                        this._pollTimer = window.setInterval(function () {\n                            var _a, _b;\n                            // @ts-ignore\n                            if (((_b = (_a = _this._instance) === null || _a === void 0 ? void 0 : _a._popup) === null || _b === void 0 ? void 0 : _b.closed) !== false) {\n                                _this._handleDisconnect();\n                            }\n                        }, 200);\n                        return [4 /*yield*/, this._instance.connect()];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    WebAdapter.prototype.disconnect = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.connected) {\n                            throw new Error('Wallet not connected');\n                        }\n                        this._instance.removeAllListeners('connect');\n                        this._instance.removeAllListeners('disconnect');\n                        return [4 /*yield*/, this._instance.disconnect()];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    WebAdapter.prototype.signTransaction = function (transaction) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.connected) {\n                            throw new Error('Wallet not connected');\n                        }\n                        return [4 /*yield*/, this._instance.signTransaction(transaction)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    WebAdapter.prototype.signAllTransactions = function (transactions) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.connected) {\n                            throw new Error('Wallet not connected');\n                        }\n                        return [4 /*yield*/, this._instance.signAllTransactions(transactions)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    WebAdapter.prototype.signMessage = function (data, display) {\n        if (display === void 0) { display = 'hex'; }\n        return __awaiter(this, void 0, void 0, function () {\n            var signature;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.connected) {\n                            throw new Error('Wallet not connected');\n                        }\n                        return [4 /*yield*/, this._instance.sign(data, display)];\n                    case 1:\n                        signature = (_a.sent()).signature;\n                        return [2 /*return*/, Uint8Array.from(signature)];\n                }\n            });\n        });\n    };\n    return WebAdapter;\n}(WalletAdapter));\nexport default WebAdapter;\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { PublicKey } from '@solana/web3.js';\nimport WalletAdapter from './base';\nimport { v4 as uuidv4 } from 'uuid';\nimport bs58 from 'bs58';\nvar IframeAdapter = /** @class */ (function (_super) {\n    __extends(IframeAdapter, _super);\n    function IframeAdapter(iframe, publicKey) {\n        var _a;\n        var _this = _super.call(this) || this;\n        _this._publicKey = null;\n        _this._messageHandlers = {};\n        _this.handleMessage = function (data) {\n            if (_this._messageHandlers[data.id]) {\n                var _a = _this._messageHandlers[data.id], resolve = _a.resolve, reject = _a.reject;\n                delete _this._messageHandlers[data.id];\n                if (data.error) {\n                    reject(data.error);\n                }\n                else {\n                    resolve(data.result);\n                }\n            }\n        };\n        _this._sendMessage = function (data) {\n            if (!_this.connected) {\n                throw new Error('Wallet not connected');\n            }\n            return new Promise(function (resolve, reject) {\n                var _a, _b;\n                var messageId = uuidv4();\n                _this._messageHandlers[messageId] = { resolve: resolve, reject: reject };\n                (_b = (_a = _this._iframe) === null || _a === void 0 ? void 0 : _a.contentWindow) === null || _b === void 0 ? void 0 : _b.postMessage({\n                    channel: 'solflareWalletAdapterToIframe',\n                    data: __assign({ id: messageId }, data)\n                }, '*');\n            });\n        };\n        _this._iframe = iframe;\n        _this._publicKey = new PublicKey((_a = publicKey === null || publicKey === void 0 ? void 0 : publicKey.toString) === null || _a === void 0 ? void 0 : _a.call(publicKey));\n        return _this;\n    }\n    Object.defineProperty(IframeAdapter.prototype, \"publicKey\", {\n        get: function () {\n            return this._publicKey || null;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IframeAdapter.prototype, \"connected\", {\n        get: function () {\n            return true;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    IframeAdapter.prototype.connect = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/];\n            });\n        });\n    };\n    IframeAdapter.prototype.disconnect = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._sendMessage({\n                            method: 'disconnect'\n                        })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    IframeAdapter.prototype.signTransaction = function (transaction) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, publicKey, signature, e_1;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!this.connected) {\n                            throw new Error('Wallet not connected');\n                        }\n                        _b.label = 1;\n                    case 1:\n                        _b.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, this._sendMessage({\n                                method: 'signTransaction',\n                                params: {\n                                    message: bs58.encode(transaction.serializeMessage())\n                                }\n                            })];\n                    case 2:\n                        _a = _b.sent(), publicKey = _a.publicKey, signature = _a.signature;\n                        transaction.addSignature(new PublicKey(publicKey), bs58.decode(signature));\n                        return [2 /*return*/, transaction];\n                    case 3:\n                        e_1 = _b.sent();\n                        console.log(e_1);\n                        throw new Error('Failed to sign transaction');\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    IframeAdapter.prototype.signAllTransactions = function (transactions) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, publicKey_1, signatures_1, e_2;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!this.connected) {\n                            throw new Error('Wallet not connected');\n                        }\n                        _b.label = 1;\n                    case 1:\n                        _b.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, this._sendMessage({\n                                method: 'signAllTransactions',\n                                params: {\n                                    messages: transactions.map(function (transaction) { return bs58.encode(transaction.serializeMessage()); })\n                                }\n                            })];\n                    case 2:\n                        _a = _b.sent(), publicKey_1 = _a.publicKey, signatures_1 = _a.signatures;\n                        return [2 /*return*/, transactions.map(function (tx, id) {\n                                tx.addSignature(new PublicKey(publicKey_1), bs58.decode(signatures_1[id]));\n                                return tx;\n                            })];\n                    case 3:\n                        e_2 = _b.sent();\n                        console.log(e_2);\n                        throw new Error('Failed to sign transactions');\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    IframeAdapter.prototype.signMessage = function (data, display) {\n        if (display === void 0) { display = 'hex'; }\n        return __awaiter(this, void 0, void 0, function () {\n            var result, e_3;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.connected) {\n                            throw new Error('Wallet not connected');\n                        }\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, this._sendMessage({\n                                method: 'signMessage',\n                                params: {\n                                    data: data,\n                                    display: display\n                                }\n                            })];\n                    case 2:\n                        result = _a.sent();\n                        return [2 /*return*/, Uint8Array.from(bs58.decode(result))];\n                    case 3:\n                        e_3 = _a.sent();\n                        console.log(e_3);\n                        throw new Error('Failed to sign message');\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    return IframeAdapter;\n}(WalletAdapter));\nexport default IframeAdapter;\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nimport EventEmitter from 'eventemitter3';\nimport WebAdapter from './adapters/web';\nimport IframeAdapter from './adapters/iframe';\nvar Solflare = /** @class */ (function (_super) {\n    __extends(Solflare, _super);\n    function Solflare(config) {\n        var _this = _super.call(this) || this;\n        _this._network = 'mainnet-beta';\n        _this._adapterInstance = null;\n        _this._element = null;\n        _this._iframe = null;\n        _this._connectHandler = null;\n        _this._flutterHandlerInterval = null;\n        _this._handleEvent = function (event) {\n            var _a, _b, _c;\n            switch (event.type) {\n                case 'connect_native_web': {\n                    _this._collapseIframe();\n                    _this._adapterInstance = new WebAdapter(_this._iframe, _this._network, ((_a = event.data) === null || _a === void 0 ? void 0 : _a.provider) || 'https://solflare.com/provider');\n                    _this._adapterInstance.on('connect', _this._webConnected);\n                    _this._adapterInstance.on('disconnect', _this._webDisconnected);\n                    _this._adapterInstance.connect();\n                    _this._setPreferredAdapter('native_web');\n                    return;\n                }\n                case 'connect': {\n                    _this._collapseIframe();\n                    _this._adapterInstance = new IframeAdapter(_this._iframe, ((_b = event.data) === null || _b === void 0 ? void 0 : _b.publicKey) || '');\n                    _this._adapterInstance.connect();\n                    _this._setPreferredAdapter((_c = event.data) === null || _c === void 0 ? void 0 : _c.adapter);\n                    if (_this._connectHandler) {\n                        _this._connectHandler.resolve();\n                        _this._connectHandler = null;\n                    }\n                    _this.emit('connect', _this.publicKey);\n                    return;\n                }\n                case 'disconnect': {\n                    if (_this._connectHandler) {\n                        _this._connectHandler.reject();\n                        _this._connectHandler = null;\n                    }\n                    _this._disconnected();\n                    _this.emit('disconnect');\n                    return;\n                }\n                case 'collapse': {\n                    _this._collapseIframe();\n                    return;\n                }\n                default: {\n                    return;\n                }\n            }\n        };\n        _this._handleMessage = function (event) {\n            var _a;\n            if (((_a = event.data) === null || _a === void 0 ? void 0 : _a.channel) !== 'solflareIframeToWalletAdapter') {\n                return;\n            }\n            var data = event.data.data || {};\n            if (data.type === 'event') {\n                _this._handleEvent(data.event);\n            }\n            else if (_this._adapterInstance) {\n                _this._adapterInstance.handleMessage(data);\n            }\n        };\n        _this._removeElement = function () {\n            if (_this._flutterHandlerInterval !== null) {\n                clearInterval(_this._flutterHandlerInterval);\n                _this._flutterHandlerInterval = null;\n            }\n            if (_this._element) {\n                _this._element.remove();\n                _this._element = null;\n            }\n        };\n        _this._removeDanglingElements = function () {\n            var e_1, _a;\n            var elements = document.getElementsByClassName('solflare-wallet-adapter-iframe');\n            try {\n                for (var elements_1 = __values(elements), elements_1_1 = elements_1.next(); !elements_1_1.done; elements_1_1 = elements_1.next()) {\n                    var element = elements_1_1.value;\n                    if (element.parentElement) {\n                        element.remove();\n                    }\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (elements_1_1 && !elements_1_1.done && (_a = elements_1.return)) _a.call(elements_1);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n        };\n        _this._injectElement = function () {\n            _this._removeElement();\n            _this._removeDanglingElements();\n            var iframeUrl = \"\".concat(Solflare.IFRAME_URL, \"?cluster=\").concat(encodeURIComponent(_this._network), \"&origin=\").concat(encodeURIComponent(window.location.origin));\n            var preferredAdapter = _this._getPreferredAdapter();\n            if (preferredAdapter) {\n                iframeUrl += \"&adapter=\".concat(encodeURIComponent(preferredAdapter));\n            }\n            _this._element = document.createElement('div');\n            _this._element.className = 'solflare-wallet-adapter-iframe';\n            _this._element.innerHTML = \"\\n      <iframe src='\".concat(iframeUrl, \"' style='position: fixed; top: 0; bottom: 0; left: 0; right: 0; width: 100%; height: 100%; border: none; border-radius: 0; z-index: 99999; color-scheme: auto;' allowtransparency='true'></iframe>\\n    \");\n            document.body.appendChild(_this._element);\n            _this._iframe = _this._element.querySelector('iframe');\n            // @ts-ignore\n            window.fromFlutter = _this._handleMobileMessage;\n            _this._flutterHandlerInterval = setInterval(function () {\n                // @ts-ignore\n                window.fromFlutter = _this._handleMobileMessage;\n            }, 100);\n            window.addEventListener('message', _this._handleMessage, false);\n        };\n        _this._collapseIframe = function () {\n            if (_this._iframe) {\n                _this._iframe.style.top = '';\n                _this._iframe.style.right = '';\n                _this._iframe.style.height = '2px';\n                _this._iframe.style.width = '2px';\n            }\n        };\n        _this._getPreferredAdapter = function () {\n            if (localStorage) {\n                return localStorage.getItem('solflarePreferredWalletAdapter') || null;\n            }\n            return null;\n        };\n        _this._setPreferredAdapter = function (adapter) {\n            if (localStorage && adapter) {\n                localStorage.setItem('solflarePreferredWalletAdapter', adapter);\n            }\n        };\n        _this._clearPreferredAdapter = function () {\n            if (localStorage) {\n                localStorage.removeItem('solflarePreferredWalletAdapter');\n            }\n        };\n        _this._webConnected = function () {\n            if (_this._connectHandler) {\n                _this._connectHandler.resolve();\n                _this._connectHandler = null;\n            }\n            _this.emit('connect', _this.publicKey);\n        };\n        _this._webDisconnected = function () {\n            if (_this._connectHandler) {\n                _this._connectHandler.reject();\n                _this._connectHandler = null;\n            }\n            _this._disconnected();\n            _this.emit('disconnect');\n        };\n        _this._disconnected = function () {\n            window.removeEventListener('message', _this._handleMessage, false);\n            _this._removeElement();\n            _this._clearPreferredAdapter();\n            _this._adapterInstance = null;\n        };\n        _this._handleMobileMessage = function (data) {\n            var _a, _b;\n            (_b = (_a = _this._iframe) === null || _a === void 0 ? void 0 : _a.contentWindow) === null || _b === void 0 ? void 0 : _b.postMessage({\n                channel: 'solflareMobileToIframe',\n                data: data\n            }, '*');\n        };\n        if (config === null || config === void 0 ? void 0 : config.network) {\n            _this._network = config === null || config === void 0 ? void 0 : config.network;\n        }\n        return _this;\n    }\n    Object.defineProperty(Solflare.prototype, \"publicKey\", {\n        get: function () {\n            var _a;\n            return ((_a = this._adapterInstance) === null || _a === void 0 ? void 0 : _a.publicKey) || null;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Solflare.prototype, \"isConnected\", {\n        get: function () {\n            var _a;\n            return !!((_a = this._adapterInstance) === null || _a === void 0 ? void 0 : _a.connected);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Solflare.prototype, \"connected\", {\n        get: function () {\n            return this.isConnected;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Solflare.prototype, \"autoApprove\", {\n        get: function () {\n            return false;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Solflare.prototype.connect = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (this.connected) {\n                            return [2 /*return*/];\n                        }\n                        this._injectElement();\n                        return [4 /*yield*/, new Promise(function (resolve, reject) {\n                                _this._connectHandler = { resolve: resolve, reject: reject };\n                            })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    Solflare.prototype.disconnect = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this._adapterInstance) {\n                            return [2 /*return*/];\n                        }\n                        return [4 /*yield*/, this._adapterInstance.disconnect()];\n                    case 1:\n                        _a.sent();\n                        this._disconnected();\n                        this.emit('disconnect');\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    Solflare.prototype.signTransaction = function (transaction) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.connected) {\n                            throw new Error('Wallet not connected');\n                        }\n                        return [4 /*yield*/, this._adapterInstance.signTransaction(transaction)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    Solflare.prototype.signAllTransactions = function (transactions) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.connected) {\n                            throw new Error('Wallet not connected');\n                        }\n                        return [4 /*yield*/, this._adapterInstance.signAllTransactions(transactions)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    Solflare.prototype.signMessage = function (data, display) {\n        if (display === void 0) { display = 'utf8'; }\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.connected) {\n                            throw new Error('Wallet not connected');\n                        }\n                        return [4 /*yield*/, this._adapterInstance.signMessage(data, display)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    Solflare.prototype.sign = function (data, display) {\n        if (display === void 0) { display = 'utf8'; }\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.signMessage(data, display)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    Solflare.prototype.detectWallet = function (timeout) {\n        if (timeout === void 0) { timeout = 10; }\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, new Promise(function (resolve) {\n                        var element = null;\n                        function handleDetected(detected) {\n                            cleanUp();\n                            resolve(detected);\n                        }\n                        var timeoutHandler = setTimeout(function () {\n                            handleDetected(false);\n                        }, timeout * 1000);\n                        function cleanUp() {\n                            window.removeEventListener('message', handleMessage, false);\n                            if (element) {\n                                document.body.removeChild(element);\n                                element = null;\n                            }\n                            if (timeoutHandler) {\n                                clearTimeout(timeoutHandler);\n                                timeoutHandler = null;\n                            }\n                        }\n                        function handleMessage(event) {\n                            var _a, _b, _c;\n                            if (((_a = event.data) === null || _a === void 0 ? void 0 : _a.channel) !== 'solflareDetectorToAdapter') {\n                                return;\n                            }\n                            handleDetected(!!((_c = (_b = event.data) === null || _b === void 0 ? void 0 : _b.data) === null || _c === void 0 ? void 0 : _c.detected));\n                        }\n                        window.addEventListener('message', handleMessage, false);\n                        element = document.createElement('div');\n                        element.className = 'solflare-wallet-detect-iframe';\n                        element.innerHTML = \"\\n        <iframe src='\".concat(Solflare.DETECT_IFRAME_URL, \"?timeout=\").concat(timeout, \"' style='position: fixed; top: -9999px; left: -9999px; width: 0; height: 0; pointer-events: none; border: none;'></iframe>\\n      \");\n                        document.body.appendChild(element);\n                    })];\n            });\n        });\n    };\n    Solflare.IFRAME_URL = 'https://connect.solflare.com/';\n    Solflare.DETECT_IFRAME_URL = 'https://connect.solflare.com/detect';\n    return Solflare;\n}(EventEmitter));\nexport default Solflare;\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nconst base64 = require('base64-js')\nconst ieee754 = require('ieee754')\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","this","constructor","create","WalletAdapter","_super","apply","arguments","EventEmitter","toBuffer","arr","Buffer","Uint8Array","buffer","byteOffset","byteLength","minimalisticAssert","assert","val","msg","Error","equal","l","r","inherits_browserModule","ctor","superCtor","super_","value","enumerable","writable","configurable","TempCtor","require$$0","inherits","require$$1","isSurrogatePair","i","charCodeAt","length","htonl","w","zero2","word","zero8","enc","isArray","slice","res","replace","push","parseInt","c","toString","endian","start","end","len","k","m","a","e","buf","pos","ah","al","bh","lo","hi","bl","ch","cl","dh","dl","carry","eh","el","num","utils","BlockHash","pending","pendingTotal","blockSize","outSize","hmacStrength","padLength","_delta8","_delta32","update","toArray","concat","join32","_update","digest","_pad","_digest","bytes","t","rotr32","ch32","x","y","z","maj32","p32","s","common","shaCommon","require$$2","rotl32","sum32","sum32_5","ft_1","sha1_K","SHA1","h","W","_1","toHex32","split32","require$$3","sum32_4","s0_256","s1_256","g0_256","g1_256","sha256_K","SHA256","_256","f","g","T1","T2","SHA224","_224","rotr64_hi","rotr64_lo","shr64_hi","shr64_lo","sum64","sum64_hi","sum64_lo","sum64_4_hi","sum64_4_lo","sum64_5_hi","sum64_5_lo","sha512_K","SHA512","_512","ch64_hi","xh","xl","yh","yl","zh","ch64_lo","zl","maj64_hi","maj64_lo","s0_512_hi","s0_512_lo","s1_512_hi","s1_512_lo","g0_512_hi","g0_512_lo","g1_512_hi","g1_512_lo","_prepareBlock","c0_hi","c0_lo","c1_hi","c1_lo","c2_hi","c2_lo","c3_hi","c3_lo","fh","fl","gh","gl","hh","hl","c4_hi","c4_lo","T1_hi","T1_lo","T2_hi","T2_lo","SHA384","_384","require$$4","sum32_3","RIPEMD160","j","K","Kh","A","B","C","D","E","Ah","Bh","Ch","Dh","Eh","T","rh","sh","Hmac","hash","key","Hash","inner","outer","_init","hmac","exports","sha","ripemd","sha1","sha256","sha224","sha384","sha512","ripemd160","_permanentCensorErrors","_censorErrors","LogLevels","debug","info","warning","error","off","_logLevel","_globalLogger","LogLevel","ErrorCode","_normalizeError","missing","forEach","form","normalize","join","fromCharCode","message","_checkNormalize","HEX","Logger","version","defineProperty","logLevel","args","level","toLowerCase","throwArgumentError","console","log","_log","levels","DEBUG","INFO","WARNING","code","params","makeError","errors","UNKNOWN_ERROR","messageDetails","keys","hex","JSON","stringify","reason","name","throwError","INVALID_ARGUMENT","argument","condition","UNSUPPORTED_OPERATION","operation","NUMERIC_FAULT","fault","count","expectedCount","MISSING_ARGUMENT","UNEXPECTED_ARGUMENT","target","kind","MISSING_NEW","censorship","permanent","globalLogger","warn","logger","addSlice","array","isInteger","arrayify","options","checkSafeUint53","result","unshift","allowMissingPrefix","substring","toHexString","isHexable","match","isHexString","hexPad","v","isBytes","data","Struct","properties","assign","encode","serialize","SOLANA_SCHEMA","deserialize","deserializeUnchecked","Map","PublicKey","_bn","undefined","isPublicKeyData","decoded","bs58","BN","equals","publicKey","eq","toBase58","toBytes","toJSON","toArrayLike","zeroPad","copy","fromPublicKey","seed","programId","seeds","is_on_curve","publicKeyBytes","nonce","seedsWithNonce","createProgramAddress","address","err","pubkey","default","set","fields","naclLowLevel","nacl","gf","chk","den","den2","den4","den6","set25519","gf1","unpack25519","S","M","Z","pow2523","neq25519","I","pack25519","crypto_verify_32","property","BufferLayout","rustString","rsl","_decode","decode","bind","_encode","offset","str","chars","alloc","span","decodeLength","size","elem","shift","encodeLength","rem_len","Message","header","accountKeys","recentBlockhash","instructions","indexToProgramIds","map","account","ix","programIdIndex","isAccountSigner","index","numRequiredSignatures","isAccountWritable","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","isProgramId","has","programIds","values","nonProgramIds","filter","_","numKeys","keyCount","shortvec","instruction","accounts","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","PACKET_DATA_SIZE","instructionBufferLength","signDataLayout","Layout","transaction","signData","byteArray","accountCount","dataSlice","DEFAULT_SIGNATURE","fill","TransactionInstruction","opts","Transaction","signatures","feePayer","nonceInfo","signature","add","items","item","compileMessage","nonceInstruction","accountMetas","accountMeta","includes","isSigner","isWritable","sort","pubkeySorting","localeCompare","checkSigner","checkWritable","uniqueMetas","pubkeyString","uniqueIndex","findIndex","feePayerIndex","splice","payerMeta","signedKeys","unsignedKeys","indexOf","meta","invariant","keyIndex","_compile","every","pair","serializeMessage","setSigners","signers","seen","Set","sign","uniqueSigners","signer","_partialSign","_verifySignatures","partialSign","secretKey","_addSignature","addSignature","sigpair","verifySignatures","requireAllSignatures","config","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","from","sigPubkeyPair","some","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","sendAndConfirmTransaction","connection","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","sendTransaction","confirmTransaction","status","sleep","ms","Promise","resolve","setTimeout","encodeData","type","allocLength","layout","layoutFields","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","SYSTEM_INSTRUCTION_LAYOUTS","freeze","Create","Assign","Transfer","CreateWithSeed","AdvanceNonceAccount","WithdrawNonceAccount","InitializeNonceAccount","AuthorizeNonceAccount","Allocate","AllocateWithSeed","AssignWithSeed","TransferWithSeed","SystemProgram","lamports","space","fromPubkey","newAccountPubkey","basePubkey","toPubkey","base","accountPubkey","createAccountWithSeed","noncePubkey","createAccount","initParams","authorizedPubkey","nonceInitialize","authorized","instructionData","newAuthorizedPubkey","CHUNK_SIZE","Loader","Math","ceil","chunkSize","payer","program","getMinimumBalanceForRentExemption","balanceNeeded","getAccountInfo","programInfo","executable","allocate","owner","transfer","dataLayout","transactions","_rpcEndpoint","all","global","self","__self__","F","fetch","DOMException","support","Symbol","Blob","viewClasses","isArrayBufferView","ArrayBuffer","isView","obj","normalizeName","test","normalizeValue","iteratorFor","iterator","next","done","Headers","headers","append","getOwnPropertyNames","consumed","body","bodyUsed","reject","fileReaderReady","reader","onload","onerror","readBlobAsArrayBuffer","blob","FileReader","promise","readAsArrayBuffer","bufferClone","view","Body","_initBody","_bodyInit","_bodyText","isPrototypeOf","_bodyBlob","FormData","_bodyFormData","URLSearchParams","DataView","_bodyArrayBuffer","get","rejected","arrayBuffer","then","text","readAsText","readBlobAsText","readArrayBufferAsText","formData","json","parse","oldValue","callback","thisArg","entries","methods","Request","input","url","credentials","method","mode","signal","upcased","toUpperCase","normalizeMethod","referrer","trim","split","decodeURIComponent","parseHeaders","rawHeaders","line","parts","Response","bodyInit","ok","statusText","clone","response","redirectStatuses","redirect","RangeError","location","stack","init","request","aborted","xhr","XMLHttpRequest","abortXhr","abort","getAllResponseHeaders","responseURL","responseText","ontimeout","onabort","open","withCredentials","responseType","setRequestHeader","addEventListener","onreadystatechange","readyState","removeEventListener","send","polyfill","ponyfill","ctx","module","PublicKeyFromString","coerce","instance","string","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","createRpcResult","union","pick","jsonrpc","id","unknown","optional","any","UnknownRpcResult","jsonRpcResult","schema","jsonRpcResultAndContext","context","slot","number","notificationResultAndContext","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetEpochInfoResult","nullable","epoch","effectiveSlot","amount","postBalance","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","slotsPerEpoch","leaderScheduleSlotOffset","warmup","boolean","firstNormalEpoch","firstNormalSlot","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","logs","rentEpoch","unitsConsumed","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","ParsedAccountDataResult","parsed","AccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","ProgramAccountInfoResult","state","active","inactive","memo","blockTime","subscription","SlotInfoResult","parent","root","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","VoteAccountInfoResult","gossip","tpu","rpc","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","commission","lastVote","rootSlot","ConfirmationStatus","current","delinquent","SignatureStatusResponse","confirmations","confirmationStatus","ConfirmedTransactionResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","ParsedConfirmedTransactionMetaResult","PerfSampleResult","blockhash","previousBlockhash","parentSlot","rewards","rewardType","feeCalculator","lamportsPerSignature","lastValidBlockHeight","numTransactions","numSlots","samplePeriodSecs","LogsResult","Keypair","keypair","_keypair","skipValidation","TextEncoder","ED25519_INSTRUCTION_LAYOUT","Ed25519Program","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","privateKey","fromSecretKey","createInstructionWithPublicKey","STAKE_CONFIG_ID","Lockup","unixTimestamp","custodian","STAKE_INSTRUCTION_LAYOUTS","Initialize","Authorize","Delegate","Split","Withdraw","Deactivate","Merge","AuthorizeWithSeed","StakeProgram","Staker","Withdrawer","stakePubkey","lockup","staker","withdrawer","initialize","stakeAuthorizationType","custodianPubkey","newAuthorized","authorityBase","authoritySeed","authorityOwner","splitStakePubkey","splitInstruction","sourceStakePubKey","publicKeyCreate","secp256k1","ecdsaSign","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","sha3","recoveryId","createInstructionWithEthAddress","ethAddress","publicKeyToEthAddress","rawAddress","startsWith","substr","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","recid","website","details","keybaseUsername","VOTE_INSTRUCTION_LAYOUTS","InitializeAccount","VoteProgram","Voter","voteInit","authorizedVoter","authorizedWithdrawer","initializeAccount","voteAuthorizationType","authorizedWithdrawerPubkey","Wallet","provider","network","_this","_handleMessage","_injectedProvider","source","window","origin","_providerUrl","_popup","newPublicKey","_publicKey","_handleDisconnect","_autoApprove","autoApprove","emit","_responsePromises","_handleConnect","_handlerAdded","disconnect","_sendRequest","once","delete","connected","requestId","_nextRequestId","postMessage","_network","focus","connect","close","display","signTransaction","signAllTransactions","messages","tx","idx","isObject","isFunction","isString","URL","__awaiter","_arguments","P","generator","fulfilled","step","__generator","label","sent","trys","ops","verb","n","op","pop","WebAdapter","iframe","_instance","handleMessage","clearInterval","_pollTimer","_provider","_a","on","setInterval","_b","closed","removeAllListeners","signMessage","__assign","IframeAdapter","_messageHandlers","_sendMessage","messageId","uuidv4","_iframe","contentWindow","channel","e_1","publicKey_1","signatures_1","e_2","e_3","__values","o","Solflare","_adapterInstance","_element","_connectHandler","_flutterHandlerInterval","_handleEvent","event","_c","_collapseIframe","_webConnected","_webDisconnected","_setPreferredAdapter","adapter","_disconnected","_removeElement","remove","_removeDanglingElements","elements","document","getElementsByClassName","elements_1","elements_1_1","element","parentElement","e_1_1","return","_injectElement","iframeUrl","IFRAME_URL","encodeURIComponent","preferredAdapter","_getPreferredAdapter","createElement","className","innerHTML","appendChild","querySelector","fromFlutter","_handleMobileMessage","style","top","right","height","width","localStorage","getItem","setItem","_clearPreferredAdapter","removeItem","isConnected","detectWallet","timeout","handleDetected","detected","removeChild","timeoutHandler","clearTimeout","cleanUp","DETECT_IFRAME_URL","base64","require","ieee754","customInspectSymbol","K_MAX_LENGTH","createBuffer","arg","encodingOrOffset","allocUnsafe","encoding","isEncoding","actual","write","fromString","arrayView","isInstance","fromArrayBuffer","fromArrayLike","fromArrayView","SharedArrayBuffer","valueOf","isBuffer","checked","numberIsNaN","fromObject","toPrimitive","assertSize","mustMatch","loweredCase","utf8ToBytes","base64ToBytes","slowToString","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","bidirectionalIndexOf","dir","arrayIndexOf","lastIndexOf","indexSize","arrLength","valLength","read","readUInt16BE","foundIndex","found","hexWrite","Number","remaining","strLen","utf8Write","blitBuffer","asciiWrite","asciiToBytes","base64Write","ucs2Write","units","utf16leToBytes","fromByteArray","min","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","codePoints","MAX_ARGUMENTS_LENGTH","decodeCodePointsArray","TYPED_ARRAY_SUPPORT","proto","foo","typedArraySupport","poolSize","allocUnsafeSlow","_isBuffer","compare","list","swap16","swap32","swap64","toLocaleString","inspect","max","thisStart","thisEnd","thisCopy","targetCopy","isFinite","_arr","ret","out","hexSliceLookupTable","checkOffset","ext","checkInt","wrtBigUInt64LE","checkIntBI","BigInt","wrtBigUInt64BE","checkIEEE754","writeFloat","littleEndian","noAssert","writeDouble","newBuf","subarray","readUintLE","readUIntLE","mul","readUintBE","readUIntBE","readUint8","readUInt8","readUint16LE","readUInt16LE","readUint16BE","readUint32LE","readUInt32LE","readUint32BE","readUInt32BE","readBigUInt64LE","defineBigIntMethod","validateNumber","first","last","boundsError","readBigUInt64BE","readIntLE","pow","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readBigInt64LE","readBigInt64BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUintLE","writeUIntLE","writeUintBE","writeUIntBE","writeUint8","writeUInt8","writeUint16LE","writeUInt16LE","writeUint16BE","writeUInt16BE","writeUint32LE","writeUInt32LE","writeUint32BE","writeUInt32BE","writeBigUInt64LE","writeBigUInt64BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeBigInt64LE","writeBigInt64BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","copyWithin","sym","getMessage","Base","addNumericalSeparator","range","ERR_OUT_OF_RANGE","checkBounds","ERR_INVALID_ARG_TYPE","floor","ERR_BUFFER_OUT_OF_BOUNDS","received","abs","INVALID_BASE64_RE","Infinity","leadSurrogate","toByteArray","base64clean","src","dst","alphabet","table","i16","fn","BufferBigIntNotDefined"],"sourceRoot":""}